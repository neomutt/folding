account.c:26:int mutt_account_match(const ACCOUNT *a1, const ACCOUNT *a2)
account.c:70:int mutt_account_fromurl(ACCOUNT *account, ciss_url_t *url)
account.c:101:void mutt_account_tourl(ACCOUNT *account, ciss_url_t *url)
account.c:158:int mutt_account_getuser(ACCOUNT *account)
account.c:194:int mutt_account_getlogin(ACCOUNT *account)
account.c:222:int mutt_account_getpass(ACCOUNT *account)
account.c:261:void mutt_account_unsetpass(ACCOUNT *account)
addrbook.c:36:static const char *alias_format_str(char *dest, size_t destlen, size_t col, int cols,
addrbook.c:72:static void alias_entry(char *s, size_t slen, MUTTMENU *m, int num)
addrbook.c:78:static int alias_tag(MUTTMENU *menu, int n, int m)
addrbook.c:88:static int alias_sort_alias(const void *a, const void *b)
addrbook.c:97:static int alias_sort_address(const void *a, const void *b)
addrbook.c:123:void mutt_alias_menu(char *buf, size_t buflen, ALIAS *aliases)
alias.c:39:static ADDRESS *expand_aliases_r(ADDRESS *a, LIST **expn)
alias.c:134:void mutt_expand_aliases_env(ENVELOPE *env)
alias.c:165:static void write_safe_address(FILE *fp, char *s)
alias.c:211:static void recode_buf(char *buf, size_t buflen)
alias.c:225:void mutt_create_alias(ENVELOPE *cur, ADDRESS *iadr)
alias.c:398:int mutt_check_alias_name(const char *s, char *dest, size_t destlen)
alias.c:450:void mutt_alias_add_reverse(ALIAS *t)
alias.c:468:void mutt_alias_delete_reverse(ALIAS *t)
alias.c:491:int mutt_alias_complete(char *s, size_t buflen)
alias.c:595:static bool string_is_address(const char *str, const char *u, const char *d)
alias.c:607:bool mutt_addr_is_user(ADDRESS *addr)
ascii.c:29:int ascii_strcasecmp(const char *a, const char *b)
ascii.c:54:int ascii_strncasecmp(const char *a, const char *b, int n)
attach.c:42:int mutt_get_tmp_attachment(BODY *a)
attach.c:84:int mutt_compose_attachment(BODY *a)
attach.c:215:int mutt_edit_attachment(BODY *a)
attach.c:285:void mutt_check_lookup_list(BODY *b, char *type, int len)
attach.c:326:int mutt_view_attachment(FILE *fp, BODY *a, int flag, HEADER *hdr, ATTACHPTR **idx, short idxlen)
attach.c:592:int mutt_pipe_attachment(FILE *fp, BODY *b, const char *path, char *outfile)
attach.c:684:static FILE *save_attachment_open(char *path, int flags)
attach.c:695:int mutt_save_attachment(FILE *fp, BODY *m, char *path, int flags, HEADER *hdr)
attach.c:809:int mutt_decode_save_attachment(FILE *fp, BODY *m, char *path, int displaying, int flags)
attach.c:900:int mutt_print_attachment(FILE *fp, BODY *a)
base64.c:64:size_t mutt_to_base64(char *out, const char *cin, size_t len, size_t olen)
base64.c:107:int mutt_from_base64(char *out, const char *in)
bcache.c:39:static int bcache_path(ACCOUNT *account, const char *mailbox, char *dst, size_t dstlen)
bcache.c:82:body_cache_t *mutt_bcache_open(ACCOUNT *account, const char *mailbox)
bcache.c:102:void mutt_bcache_close(body_cache_t **bcache)
bcache.c:159:int mutt_bcache_commit(body_cache_t *bcache, const char *id)
bcache.c:168:static int mutt_bcache_move(body_cache_t *bcache, const char *id, const char *newid)
bcache.c:184:int mutt_bcache_del(body_cache_t *bcache, const char *id)
bcache.c:200:int mutt_bcache_exists(body_cache_t *bcache, const char *id)
bcache.c:223:int mutt_bcache_list(body_cache_t *bcache,
browser.c:79:static void destroy_state(struct browser_state *state)
browser.c:94:static int browser_compare_subject(const void *a, const void *b)
browser.c:106:static int browser_compare_desc(const void *a, const void *b)
browser.c:116:static int browser_compare_date(const void *a, const void *b)
browser.c:126:static int browser_compare_size(const void *a, const void *b)
browser.c:136:static int browser_compare_count(const void *a, const void *b)
browser.c:152:static int browser_compare_count_new(const void *a, const void *b)
browser.c:172:static int browser_compare(const void *a, const void *b)
browser.c:203:static void browser_sort(struct browser_state *state)
browser.c:223:static int link_is_dir(const char *folder, const char *path)
browser.c:236:static const char *folder_format_str(char *dest, size_t destlen, size_t col, int cols,
browser.c:459:static const char *newsgroup_format_str(char *dest, size_t destlen, size_t col, int cols,
browser.c:562:static void add_folder(MUTTMENU *m, struct browser_state *state, const char *name,
browser.c:608:static void init_state(struct browser_state *state, MUTTMENU *menu)
browser.c:621:static int examine_directory(MUTTMENU *menu, struct browser_state *state,
browser.c:720:static int examine_vfolders(MUTTMENU *menu, struct browser_state *state)
browser.c:745:static int examine_mailboxes(MUTTMENU *menu, struct browser_state *state)
browser.c:838:static int select_file_search(MUTTMENU *menu, regex_t *re, int n)
browser.c:848:static int select_vfolder_search(MUTTMENU *menu, regex_t *re, int n)
browser.c:854:static void folder_entry(char *s, size_t slen, MUTTMENU *menu, int num)
browser.c:872:static void vfolder_entry(char *s, size_t slen, MUTTMENU *menu, int num)
browser.c:888:static void browser_highlight_default(struct browser_state *state, MUTTMENU *menu)
browser.c:903:static void init_menu(struct browser_state *state, MUTTMENU *menu, char *title,
browser.c:990:static int file_tag(MUTTMENU *menu, int n, int m)
browser.c:1013:void mutt_browser_select_dir(char *f)
browser.c:1022:void _mutt_select_file(char *f, size_t flen, int flags, char ***files, int *numfiles)
buffer.c:66:void mutt_buffer_free(BUFFER **p)
buffer.c:76:int mutt_buffer_printf(BUFFER *buf, const char *fmt, ...)
buffer.c:119:static void mutt_buffer_add(BUFFER *buf, const char *s, size_t len)
buffer.c:138:void mutt_buffer_addstr(BUFFER *buf, const char *s)
buffer.c:143:void mutt_buffer_addch(BUFFER *buf, char c)
buffer.c:148:int mutt_extract_token(BUFFER *dest, BUFFER *tok, int flags)
buffy.c:51:static int fseek_last_message(FILE *f)
buffy.c:97:static int test_last_status_new(FILE *f)
buffy.c:117:static int test_new_folder(const char *path)
buffy.c:137:static BUFFY *buffy_new(const char *path)
buffy.c:153:static void buffy_free(BUFFY **mailbox)
buffy.c:165:static int buffy_maildir_check_dir(BUFFY *mailbox, const char *dir_name,
buffy.c:245:static int buffy_maildir_check(BUFFY *mailbox, int check_stats)
buffy.c:270:static int buffy_mbox_check(BUFFY *mailbox, struct stat *sb, int check_stats)
buffy.c:316:static void buffy_check(BUFFY *tmp, struct stat *contex_sb, int check_stats)
buffy.c:424:static BUFFY *buffy_get(const char *path)
buffy.c:450:void mutt_buffy_cleanup(const char *buf, struct stat *st)
buffy.c:493:void mutt_update_mailbox(BUFFY *b)
buffy.c:507:int mutt_parse_mailboxes(BUFFER *path, BUFFER *s, unsigned long data, BUFFER *err)
buffy.c:594:int mutt_parse_virtual_mailboxes(BUFFER *path, BUFFER *s, unsigned long data, BUFFER *err)
buffy.c:652:int mutt_parse_unvirtual_mailboxes(BUFFER *path, BUFFER *s, unsigned long data, BUFFER *err)
buffy.c:703:int mutt_buffy_check(int force)
buffy.c:767:int mutt_buffy_list(void)
buffy.c:821:void mutt_buffy_setnotified(const char *path)
buffy.c:833:int mutt_buffy_notify(void)
buffy.c:848:void mutt_buffy(char *s, size_t slen)
buffy.c:879:void mutt_buffy_vfolder(char *s, size_t slen)
charset.c:211:void mutt_set_langinfo_charset(void)
charset.c:226:void mutt_set_langinfo_charset(void)
charset.c:235:void mutt_canonical_charset(char *dest, size_t dlen, const char *name)
charset.c:285:int mutt_chscmp(const char *s, const char *chs)
charset.c:305:char *mutt_get_default_charset(void)
charset.c:332:iconv_t mutt_iconv_open(const char *tocode, const char *fromcode, int flags)
charset.c:370:size_t mutt_iconv(iconv_t cd, ICONV_CONST char **inbuf, size_t *inbytesleft,
charset.c:442:int mutt_convert_string(char **ps, const char *from, const char *to, int flags)
charset.c:540:char *fgetconvs(char *buf, size_t l, FGETCONV *_fc)
charset.c:561:int fgetconv(FGETCONV *_fc)
charset.c:614:void fgetconv_close(FGETCONV **_fc)
charset.c:623:bool mutt_check_charset(const char *s, bool strict)
color.c:127:static COLOR_LINE *new_color_line(void)
color.c:136:static void free_color_line(COLOR_LINE **l, int free_colors)
color.c:160:void ci_start_color(void)
color.c:188:static char *get_color_name(char *dest, size_t destlen, int val)
color.c:226:int mutt_alloc_color(int fg, int bg)
color.c:294:void mutt_free_color(int fg, int bg)
color.c:338:static int parse_color_name(const char *s, int *col, int *attr, int is_fg, BUFFER *err)
color.c:390:static void do_uncolor(BUFFER *buf, BUFFER *s, COLOR_LINE **cl, int *do_cache, int parse_uncolor)
color.c:441:static int _mutt_parse_uncolor(BUFFER *buf, BUFFER *s, unsigned long data,
color.c:531:int mutt_parse_uncolor(BUFFER *buf, BUFFER *s, unsigned long data, BUFFER *err)
color.c:538:int mutt_parse_unmono(BUFFER *buf, BUFFER *s, unsigned long data, BUFFER *err)
color.c:544:static int add_pattern(COLOR_LINE **top, const char *s, int sensitive, int fg,
color.c:631:static int parse_object(BUFFER *buf, BUFFER *s, int *o, int *ql, BUFFER *err)
color.c:672:static int parse_color_pair(BUFFER *buf, BUFFER *s, int *fg, int *bg, int *attr, BUFFER *err)
color.c:701:static int parse_attr_spec(BUFFER *buf, BUFFER *s, int *fg, int *bg, int *attr, BUFFER *err)
color.c:737:static int fgbgattr_to_color(int fg, int bg, int attr)
color.c:750:static int _mutt_parse_color(BUFFER *buf, BUFFER *s, BUFFER *err,
color.c:903:int mutt_parse_color(BUFFER *buff, BUFFER *s, unsigned long data, BUFFER *err)
color.c:915:int mutt_parse_mono(BUFFER *buff, BUFFER *s, unsigned long data, BUFFER *err)
commands.c:56:int mutt_display_message(HEADER *cur)
commands.c:241:void ci_bounce_message(HEADER *h)
commands.c:331:static void pipe_set_flags(int decode, int print, int *cmflags, int *chflags)
commands.c:349:static void pipe_msg(HEADER *h, FILE *fp, int decode, int print)
commands.c:371:static int _mutt_pipe_message(HEADER *h, char *cmd, int decode, int print,
commands.c:475:void mutt_pipe_message(HEADER *h)
commands.c:488:void mutt_print_message(HEADER *h)
commands.c:509:int mutt_select_sort(int reverse)
commands.c:579:void mutt_shell_escape(void)
commands.c:601:void mutt_enter_command(void)
commands.c:630:void mutt_display_address(ENVELOPE *env)
commands.c:653:static void set_copy_flags(HEADER *hdr, int decode, int decrypt, int *cmflags, int *chflags)
commands.c:693:int _mutt_save_message(HEADER *h, CONTEXT *ctx, int delete, int decode, int decrypt)
commands.c:718:int mutt_save_message(HEADER *h, int delete, int decode, int decrypt)
commands.c:903:void mutt_version(void)
commands.c:908:void mutt_edit_content_type(HEADER *h, BODY *b, FILE *fp)
commands.c:1002:static int _mutt_check_traditional_pgp(HEADER *h, int *redraw)
commands.c:1024:int mutt_check_traditional_pgp(HEADER *h, int *redraw)
complete.c:38:int mutt_complete(char *s, size_t slen)
compose.c:122:static void snd_entry(char *b, size_t blen, MUTTMENU *menu, int num)
compose.c:132:static void redraw_crypt_lines(HEADER *msg)
compose.c:194:static void redraw_mix_line(LIST *chain)
compose.c:227:static int check_attachments(ATTACHPTR **idx, short idxlen)
compose.c:258:static void draw_envelope_addr(int line, ADDRESS *addr)
compose.c:268:static void draw_envelope(HEADER *msg, char *fcc)
compose.c:316:static void edit_address_list(int line, ADDRESS **addr)
compose.c:344:static int delete_attachment(MUTTMENU *menu, short *idxlen, int x)
compose.c:380:static void update_idx(MUTTMENU *menu, ATTACHPTR **idx, short idxlen)
compose.c:399:static void compose_status_line(char *buf, size_t buflen, size_t col, int cols,
compose.c:402:static void compose_menu_redraw(MUTTMENU *menu)
compose.c:454:static unsigned long cum_attachs_size(MUTTMENU *menu)
compose.c:500:static const char *compose_format_str(char *buf, size_t buflen, size_t col, int cols,
compose.c:550:static void compose_status_line(char *buf, size_t buflen, size_t col, int cols,
compose.c:562:int mutt_compose_menu(HEADER *msg, /* structure for new message */
compress.c:66:static int lock_realpath(CONTEXT *ctx, int excl)
compress.c:108:static void unlock_realpath(CONTEXT *ctx)
compress.c:138:static int setup_paths(CONTEXT *ctx)
compress.c:169:static int get_size(const char *path)
compress.c:187:static void store_size(const CONTEXT *ctx)
compress.c:217:static const char *find_hook(int type, const char *path)
compress.c:239:static COMPRESS_INFO *set_compress_info(CONTEXT *ctx)
compress.c:269:static void free_compress_info(CONTEXT *ctx)
compress.c:292:static char *escape_path(char *src)
compress.c:347:static const char *cb_format_str(char *dest, size_t destlen, size_t col, int cols,
compress.c:387:static void expand_command_str(const CONTEXT *ctx, const char *cmd, char *buf, int buflen)
compress.c:408:static int execute_command(CONTEXT *ctx, const char *command, const char *progress)
compress.c:446:static int comp_open_mailbox(CONTEXT *ctx)
compress.c:510:static int comp_open_append_mailbox(CONTEXT *ctx, int flags)
compress.c:592:static int comp_close_mailbox(CONTEXT *ctx)
compress.c:673:static int comp_check_mailbox(CONTEXT *ctx, int *index_hint)
compress.c:709:static int comp_open_message(CONTEXT *ctx, MESSAGE *msg, int msgno)
compress.c:729:static int comp_close_message(CONTEXT *ctx, MESSAGE *msg)
compress.c:749:static int comp_commit_message(CONTEXT *ctx, MESSAGE *msg)
compress.c:769:static int comp_open_new_message(MESSAGE *msg, CONTEXT *ctx, HEADER *hdr)
compress.c:800:bool mutt_comp_can_append(CONTEXT *ctx)
compress.c:831:bool mutt_comp_can_read(const char *path)
compress.c:853:static int comp_sync_mailbox(CONTEXT *ctx, int *index_hint)
compress.c:912:int mutt_comp_valid_command(const char *cmd)
copy.c:43:int mutt_copy_hdr(FILE *in, FILE *out, LOFF_T off_start, LOFF_T off_end,
copy.c:345:int mutt_copy_header(FILE *in, HEADER *h, FILE *out, int flags, const char *prefix)
copy.c:465:static int count_delete_lines(FILE *fp, BODY *b, LOFF_T *length, size_t datelen)
copy.c:513:int _mutt_copy_message(FILE *fpout, FILE *fpin, HEADER *hdr, BODY *body, int flags, int chflags)
copy.c:716:int mutt_copy_message(FILE *fpout, CONTEXT *src, HEADER *hdr, int flags, int chflags)
copy.c:743:static int _mutt_append_message(CONTEXT *dest, FILE *fpin, CONTEXT *src,
copy.c:773:int mutt_append_message(CONTEXT *dest, CONTEXT *src, HEADER *hdr, int cmflags, int chflags)
copy.c:792:static int copy_delete_attach(BODY *b, FILE *fpin, FILE *fpout, char *date)
copy.c:845:static void format_address_header(char **h, ADDRESS *a)
copy.c:904:static int address_header_decode(char **h)
crypt.c:48:void crypt_current_time(STATE *s, char *app_name)
crypt.c:69:void crypt_forget_passphrase(void)
crypt.c:84:static void disable_coredumps(void)
crypt.c:99:int crypt_valid_passphrase(int flags)
crypt.c:117:int mutt_protect(HEADER *msg, char *keylist)
crypt.c:303:int mutt_is_multipart_signed(BODY *b)
crypt.c:332:int mutt_is_multipart_encrypted(BODY *b)
crypt.c:351:int mutt_is_valid_multipart_pgp_encrypted(BODY *b)
crypt.c:379:int mutt_is_malformed_multipart_pgp_encrypted(BODY *b)
crypt.c:411:int mutt_is_application_pgp(BODY *m)
crypt.c:458:int mutt_is_application_smime(BODY *m)
crypt.c:525:int crypt_query(BODY *m)
crypt.c:590:int crypt_write_signed(BODY *a, STATE *s, const char *tempfile)
crypt.c:634:void convert_to_7bit(BODY *a)
crypt.c:669:void crypt_extract_keys_from_messages(HEADER *h)
crypt.c:790:int crypt_get_keys(HEADER *msg, char **keylist, int oppenc_mode)
crypt.c:846:void crypt_opportunistic_encrypt(HEADER *msg)
crypt.c:869:static void crypt_fetch_signatures(BODY ***signatures, BODY *a, int *n)
crypt.c:892:int mutt_signed_handler(BODY *a, STATE *s)
crypt.c:1016:const char *crypt_get_fingerprint_or_id(char *p, const char **pphint,
crypt.c:1099:bool crypt_is_numerical_keyid(const char *s)
cryptglue.c:54:void crypt_init(void)
cryptglue.c:103:void crypt_invoke_message(int type)
cryptglue.c:120:void crypt_pgp_void_passphrase(void)
cryptglue.c:126:int crypt_pgp_valid_passphrase(void)
cryptglue.c:136:int crypt_pgp_decrypt_mime(FILE *a, FILE **b, BODY *c, BODY **d)
cryptglue.c:145:int crypt_pgp_application_pgp_handler(BODY *m, STATE *s)
cryptglue.c:154:int crypt_pgp_encrypted_handler(BODY *a, STATE *s)
cryptglue.c:163:void crypt_pgp_invoke_getkeys(ADDRESS *addr)
cryptglue.c:170:int crypt_pgp_check_traditional(FILE *fp, BODY *b, int tagged_only)
cryptglue.c:200:char *crypt_pgp_findkeys(ADDRESS *adrlist, int oppenc_mode)
cryptglue.c:228:void crypt_pgp_invoke_import(const char *fname)
cryptglue.c:235:int crypt_pgp_verify_one(BODY *sigbdy, STATE *s, const char *tempf)
cryptglue.c:244:int crypt_pgp_send_menu(HEADER *msg)
cryptglue.c:254:void crypt_pgp_extract_keys_from_attachment_list(FILE *fp, int tag, BODY *top)
cryptglue.c:260:void crypt_pgp_set_sender(const char *sender)
cryptglue.c:275:void crypt_smime_void_passphrase(void)
cryptglue.c:281:int crypt_smime_valid_passphrase(void)
cryptglue.c:290:int crypt_smime_decrypt_mime(FILE *a, FILE **b, BODY *c, BODY **d)
cryptglue.c:299:int crypt_smime_application_smime_handler(BODY *m, STATE *s)
cryptglue.c:308:void crypt_smime_encrypted_handler(BODY *a, STATE *s)
cryptglue.c:315:void crypt_smime_getkeys(ENVELOPE *env)
cryptglue.c:322:int crypt_smime_verify_sender(HEADER *h)
cryptglue.c:334:char *crypt_smime_findkeys(ADDRESS *adrlist, int oppenc_mode)
cryptglue.c:361:void crypt_smime_invoke_import(char *infile, char *mailbox)
cryptglue.c:368:int crypt_smime_verify_one(BODY *sigbdy, STATE *s, const char *tempf)
cryptglue.c:376:int crypt_smime_send_menu(HEADER *msg)
cryptglue.c:384:void crypt_smime_set_sender(const char *sender)
crypt_gpgme.c:112:static void redraw_if_needed(gpgme_ctx_t ctx)
crypt_gpgme.c:129:static int digit_or_letter(const unsigned char *s)
crypt_gpgme.c:137:static void print_utf8(FILE *fp, const char *buf, size_t len)
crypt_gpgme.c:160:static const char *crypt_keyid(crypt_key_t *k)
crypt_gpgme.c:176:static const char *crypt_long_keyid(crypt_key_t *k)
crypt_gpgme.c:189:static const char *crypt_short_keyid(crypt_key_t *k)
crypt_gpgme.c:204:static const char *crypt_fpr(crypt_key_t *k)
crypt_gpgme.c:217:static const char *crypt_fpr_or_lkeyid(crypt_key_t *k)
crypt_gpgme.c:233:static char *crypt_key_abilities(int flags)
crypt_gpgme.c:257:static char crypt_flags(int flags)
crypt_gpgme.c:272:static crypt_key_t *crypt_copy_key(crypt_key_t *key)
crypt_gpgme.c:289:static void crypt_free_key(crypt_key_t **keylist)
crypt_gpgme.c:307:static bool crypt_key_is_valid(crypt_key_t *k)
crypt_gpgme.c:315:static int crypt_id_is_strong(crypt_key_t *key)
crypt_gpgme.c:341:static int crypt_id_is_valid(crypt_key_t *key)
crypt_gpgme.c:348:static int crypt_id_matches_addr(ADDRESS *addr, ADDRESS *u_addr, crypt_key_t *key)
crypt_gpgme.c:376:static gpgme_ctx_t create_gpgme_context(int for_smime)
crypt_gpgme.c:405:static gpgme_data_t create_gpgme_data(void)
crypt_gpgme.c:423:static gpgme_data_t body_to_data_object(BODY *a, int convert)
crypt_gpgme.c:488:static gpgme_data_t file_to_data_object(FILE *fp, long offset, long length)
crypt_gpgme.c:504:static int data_object_to_stream(gpgme_data_t data, FILE *fp)
crypt_gpgme.c:547:static char *data_object_to_tempfile(gpgme_data_t data, char *tempf, FILE **ret_fp)
crypt_gpgme.c:598:static void free_recipient_set(gpgme_key_t **p_rset)
crypt_gpgme.c:622:static gpgme_key_t *create_recipient_set(const char *keylist, gpgme_protocol_t protocol)
crypt_gpgme.c:690:static int set_signer(gpgme_ctx_t ctx, int for_smime)
crypt_gpgme.c:733:static gpgme_error_t set_pka_sig_notation(gpgme_ctx_t ctx)
crypt_gpgme.c:753:static char *encrypt_gpgme_object(gpgme_data_t plaintext, gpgme_key_t *rset,
crypt_gpgme.c:813:static int get_micalg(gpgme_ctx_t ctx, int use_smime, char *buf, size_t buflen)
crypt_gpgme.c:846:static void print_time(time_t t, STATE *s)
crypt_gpgme.c:865:static BODY *sign_message(BODY *a, int use_smime)
crypt_gpgme.c:1116:static int show_sig_summary(unsigned long sum, gpgme_ctx_t ctx, gpgme_key_t key,
crypt_gpgme.c:1243:static void show_fingerprint(gpgme_key_t key, STATE *state)
crypt_gpgme.c:1295:static void show_one_sig_validity(gpgme_ctx_t ctx, int idx, STATE *s)
crypt_gpgme.c:1332:static void print_smime_keyinfo(const char *msg, gpgme_signature_t sig,
crypt_gpgme.c:1392:static int show_one_sig_status(gpgme_ctx_t ctx, int idx, STATE *s)
crypt_gpgme.c:1505:static int verify_one(BODY *sigbdy, STATE *s, const char *tempfile, int is_smime)
crypt_gpgme.c:1630:int pgp_gpgme_verify_one(BODY *sigbdy, STATE *s, const char *tempfile)
crypt_gpgme.c:1635:int smime_gpgme_verify_one(BODY *sigbdy, STATE *s, const char *tempfile)
crypt_gpgme.c:1650:static BODY *decrypt_part(BODY *a, STATE *s, FILE *fpout, int is_smime, int *r_is_signed)
crypt_gpgme.c:1794:int pgp_gpgme_decrypt_mime(FILE *fpin, FILE **fpout, BODY *b, BODY **cur)
crypt_gpgme.c:1880:int smime_gpgme_decrypt_mime(FILE *fpin, FILE **fpout, BODY *b, BODY **cur)
crypt_gpgme.c:2001:static int pgp_gpgme_extract_keys(gpgme_data_t keydata, FILE **fp, int dryrun)
crypt_gpgme.c:2122:static int line_compare(const char *a, size_t n, const char *b)
crypt_gpgme.c:2143:static int pgp_check_traditional_one_body(FILE *fp, BODY *b, int tagged_only)
crypt_gpgme.c:2201:int pgp_gpgme_check_traditional(FILE *fp, BODY *b, int tagged_only)
crypt_gpgme.c:2220:void pgp_gpgme_invoke_import(const char *fname)
crypt_gpgme.c:2266:static void copy_clearsigned(gpgme_data_t data, STATE *s, char *charset)
crypt_gpgme.c:2323:int pgp_gpgme_application_handler(BODY *m, STATE *s)
crypt_gpgme.c:2568:int pgp_gpgme_encrypted_handler(BODY *a, STATE *s)
crypt_gpgme.c:2642:int smime_gpgme_application_handler(BODY *a, STATE *s)
crypt_gpgme.c:2730:static const char *crypt_entry_fmt(char *dest, size_t destlen, size_t col, int cols,
crypt_gpgme.c:2929:static void crypt_entry(char *s, size_t l, MUTTMENU *menu, int num)
crypt_gpgme.c:2942:static int _crypt_compare_address(const void *a, const void *b)
crypt_gpgme.c:2954:static int crypt_compare_address(const void *a, const void *b)
crypt_gpgme.c:2962:static int _crypt_compare_keyid(const void *a, const void *b)
crypt_gpgme.c:2974:static int crypt_compare_keyid(const void *a, const void *b)
crypt_gpgme.c:2981:static int _crypt_compare_date(const void *a, const void *b)
crypt_gpgme.c:3000:static int crypt_compare_date(const void *a, const void *b)
crypt_gpgme.c:3008:static int _crypt_compare_trust(const void *a, const void *b)
crypt_gpgme.c:3044:static int crypt_compare_trust(const void *a, const void *b)
crypt_gpgme.c:3052:static int print_dn_part(FILE *fp, struct dn_array_s *dn, const char *key)
crypt_gpgme.c:3070:static void print_dn_parts(FILE *fp, struct dn_array_s *dn)
crypt_gpgme.c:3106:static const char *parse_dn_part(struct dn_array_s *array, const char *string)
crypt_gpgme.c:3195:static struct dn_array_s *parse_dn(const char *string)
crypt_gpgme.c:3256:static void parse_and_print_user_id(FILE *fp, const char *userid)
crypt_gpgme.c:3295:static unsigned int key_check_cap(gpgme_key_t key, key_cap_t cap)
crypt_gpgme.c:3327:static void print_key_info(gpgme_key_t key, FILE *fp)
crypt_gpgme.c:3576:static void verify_key(crypt_key_t *key)
crypt_gpgme.c:3648:static char *list_to_pattern(LIST *list)
crypt_gpgme.c:3702:static crypt_key_t *get_candidates(LIST *hints, unsigned int app, int secret)
crypt_gpgme.c:3850:static LIST *crypt_add_string_to_hints(LIST *hints, const char *str)
crypt_gpgme.c:3871:static crypt_key_t *crypt_select_key(crypt_key_t *keys, ADDRESS *p, const char *s,
crypt_gpgme.c:4065:static crypt_key_t *crypt_getkeybyaddr(ADDRESS *a, short abilities, unsigned int app,
crypt_gpgme.c:4215:static crypt_key_t *crypt_getkeybystr(char *p, short abilities, unsigned int app, int *forced_valid)
crypt_gpgme.c:4284:static crypt_key_t *crypt_ask_for_key(char *tag, char *whatfor, short abilities,
crypt_gpgme.c:4342:static char *find_keys(ADDRESS *adrlist, unsigned int app, int oppenc_mode)
crypt_gpgme.c:4464:char *pgp_gpgme_findkeys(ADDRESS *adrlist, int oppenc_mode)
crypt_gpgme.c:4469:char *smime_gpgme_findkeys(ADDRESS *adrlist, int oppenc_mode)
crypt_gpgme.c:4542:static void init_common(void)
crypt_gpgme.c:4559:static void init_pgp(void)
crypt_gpgme.c:4567:static void init_smime(void)
crypt_gpgme.c:4575:void pgp_gpgme_init(void)
crypt_gpgme.c:4581:void smime_gpgme_init(void)
crypt_gpgme.c:4587:static int gpgme_send_menu(HEADER *msg, int is_smime)
crypt_gpgme.c:4756:int pgp_gpgme_send_menu(HEADER *msg)
crypt_gpgme.c:4761:int smime_gpgme_send_menu(HEADER *msg)
crypt_gpgme.c:4766:static int verify_sender(HEADER *h, gpgme_protocol_t protocol)
crypt_gpgme.c:4844:int smime_gpgme_verify_sender(HEADER *h)
crypt_gpgme.c:4849:void mutt_gpgme_set_sender(const char *sender)
crypt_mod.c:33:void crypto_module_register(crypt_module_specs_t specs)
crypt_mod.c:46:crypt_module_specs_t crypto_module_lookup(int identifier)
crypt_mod_pgp_classic.c:26:static void crypt_mod_pgp_void_passphrase(void)
crypt_mod_pgp_classic.c:31:static int crypt_mod_pgp_valid_passphrase(void)
crypt_mod_pgp_classic.c:36:static int crypt_mod_pgp_decrypt_mime(FILE *a, FILE **b, BODY *c, BODY **d)
crypt_mod_pgp_classic.c:40:static int crypt_mod_pgp_application_handler(BODY *m, STATE *s)
crypt_mod_pgp_classic.c:45:static char *crypt_mod_pgp_findkeys(ADDRESS *adrlist, int oppenc_mode)
crypt_mod_pgp_classic.c:50:static BODY *crypt_mod_pgp_sign_message(BODY *a)
crypt_mod_pgp_classic.c:55:static int crypt_mod_pgp_verify_one(BODY *sigbdy, STATE *s, const char *tempf)
crypt_mod_pgp_classic.c:60:static int crypt_mod_pgp_send_menu(HEADER *msg)
crypt_mod_pgp_classic.c:65:static BODY *crypt_mod_pgp_encrypt_message(BODY *a, char *keylist, int sign)
crypt_mod_pgp_classic.c:70:static BODY *crypt_mod_pgp_make_key_attachment(char *tempf)
crypt_mod_pgp_classic.c:75:static int crypt_mod_pgp_check_traditional(FILE *fp, BODY *b, int tagged_only)
crypt_mod_pgp_classic.c:80:static BODY *crypt_mod_pgp_traditional_encryptsign(BODY *a, int flags, char *keylist)
crypt_mod_pgp_classic.c:85:static int crypt_mod_pgp_encrypted_handler(BODY *m, STATE *s)
crypt_mod_pgp_classic.c:90:static void crypt_mod_pgp_invoke_getkeys(ADDRESS *addr)
crypt_mod_pgp_classic.c:95:static void crypt_mod_pgp_invoke_import(const char *fname)
crypt_mod_pgp_classic.c:100:static void crypt_mod_pgp_extract_keys_from_attachment_list(FILE *fp, int tag, BODY *top)
crypt_mod_pgp_gpgme.c:26:static void crypt_mod_pgp_init(void)
crypt_mod_pgp_gpgme.c:31:static void crypt_mod_pgp_void_passphrase(void)
crypt_mod_pgp_gpgme.c:36:static int crypt_mod_pgp_valid_passphrase(void)
crypt_mod_pgp_gpgme.c:42:static int crypt_mod_pgp_decrypt_mime(FILE *a, FILE **b, BODY *c, BODY **d)
crypt_mod_pgp_gpgme.c:47:static int crypt_mod_pgp_application_handler(BODY *m, STATE *s)
crypt_mod_pgp_gpgme.c:52:static int crypt_mod_pgp_encrypted_handler(BODY *m, STATE *s)
crypt_mod_pgp_gpgme.c:57:static int crypt_mod_pgp_check_traditional(FILE *fp, BODY *b, int tagged_only)
crypt_mod_pgp_gpgme.c:62:static void crypt_mod_pgp_invoke_import(const char *fname)
crypt_mod_pgp_gpgme.c:67:static char *crypt_mod_pgp_findkeys(ADDRESS *adrlist, int oppenc_mode)
crypt_mod_pgp_gpgme.c:72:static BODY *crypt_mod_pgp_sign_message(BODY *a)
crypt_mod_pgp_gpgme.c:77:static int crypt_mod_pgp_verify_one(BODY *sigbdy, STATE *s, const char *tempf)
crypt_mod_pgp_gpgme.c:82:static int crypt_mod_pgp_send_menu(HEADER *msg)
crypt_mod_pgp_gpgme.c:87:static BODY *crypt_mod_pgp_encrypt_message(BODY *a, char *keylist, int sign)
crypt_mod_pgp_gpgme.c:93:static BODY *crypt_mod_pgp_make_key_attachment(char *tempf)
crypt_mod_pgp_gpgme.c:99:static void crypt_mod_pgp_set_sender(const char *sender)
crypt_mod_smime_classic.c:26:static void crypt_mod_smime_void_passphrase(void)
crypt_mod_smime_classic.c:31:static int crypt_mod_smime_valid_passphrase(void)
crypt_mod_smime_classic.c:36:static int crypt_mod_smime_decrypt_mime(FILE *a, FILE **b, BODY *c, BODY **d)
crypt_mod_smime_classic.c:40:static int crypt_mod_smime_application_handler(BODY *m, STATE *s)
crypt_mod_smime_classic.c:45:static char *crypt_mod_smime_findkeys(ADDRESS *adrlist, int oppenc_mode)
crypt_mod_smime_classic.c:50:static BODY *crypt_mod_smime_sign_message(BODY *a)
crypt_mod_smime_classic.c:55:static int crypt_mod_smime_verify_one(BODY *sigbdy, STATE *s, const char *tempf)
crypt_mod_smime_classic.c:60:static int crypt_mod_smime_send_menu(HEADER *msg)
crypt_mod_smime_classic.c:65:static void crypt_mod_smime_getkeys(ENVELOPE *env)
crypt_mod_smime_classic.c:70:static int crypt_mod_smime_verify_sender(HEADER *h)
crypt_mod_smime_classic.c:75:static BODY *crypt_mod_smime_build_smime_entity(BODY *a, char *certlist)
crypt_mod_smime_classic.c:80:static void crypt_mod_smime_invoke_import(char *infile, char *mailbox)
crypt_mod_smime_gpgme.c:26:static void crypt_mod_smime_init(void)
crypt_mod_smime_gpgme.c:31:static void crypt_mod_smime_void_passphrase(void)
crypt_mod_smime_gpgme.c:36:static int crypt_mod_smime_valid_passphrase(void)
crypt_mod_smime_gpgme.c:42:static int crypt_mod_smime_decrypt_mime(FILE *a, FILE **b, BODY *c, BODY **d)
crypt_mod_smime_gpgme.c:47:static int crypt_mod_smime_application_handler(BODY *m, STATE *s)
crypt_mod_smime_gpgme.c:52:static char *crypt_mod_smime_findkeys(ADDRESS *adrlist, int oppenc_mode)
crypt_mod_smime_gpgme.c:57:static BODY *crypt_mod_smime_sign_message(BODY *a)
crypt_mod_smime_gpgme.c:62:static int crypt_mod_smime_verify_one(BODY *sigbdy, STATE *s, const char *tempf)
crypt_mod_smime_gpgme.c:67:static int crypt_mod_smime_send_menu(HEADER *msg)
crypt_mod_smime_gpgme.c:72:static BODY *crypt_mod_smime_build_smime_entity(BODY *a, char *certlist)
crypt_mod_smime_gpgme.c:77:static int crypt_mod_smime_verify_sender(HEADER *h)
curs_lib.c:77:void mutt_refresh(void)
curs_lib.c:95:void mutt_need_hard_redraw(void)
curs_lib.c:102:event_t mutt_getch(void)
curs_lib.c:158:int _mutt_get_field(const char *field, char *buf, size_t buflen, int complete,
curs_lib.c:191:int mutt_get_field_unbuffered(char *msg, char *buf, size_t buflen, int flags)
curs_lib.c:202:void mutt_clear_error(void)
curs_lib.c:209:void mutt_edit_file(const char *editor, const char *data)
curs_lib.c:228:int mutt_yesorno(const char *msg, int def)
curs_lib.c:377:void mutt_query_exit(void)
curs_lib.c:393:static void curses_message(int error, const char *fmt, va_list ap)
curs_lib.c:420:void mutt_curses_error(const char *fmt, ...)
curs_lib.c:429:void mutt_curses_message(const char *fmt, ...)
curs_lib.c:438:void mutt_progress_init(progress_t *progress, const char *msg,
curs_lib.c:483:static void message_bar(int percent, const char *fmt, ...)
curs_lib.c:537:void mutt_progress_update(progress_t *progress, long pos, int percent)
curs_lib.c:606:void mutt_init_windows(void)
curs_lib.c:617:void mutt_free_windows(void)
curs_lib.c:628:void mutt_reflow_windows(void)
curs_lib.c:678:static void reflow_message_window_rows(int mw_rows)
curs_lib.c:701:int mutt_window_move(mutt_window_t *win, int row, int col)
curs_lib.c:706:int mutt_window_mvaddch(mutt_window_t *win, int row, int col, const chtype ch)
curs_lib.c:711:int mutt_window_mvaddstr(mutt_window_t *win, int row, int col, const char *str)
curs_lib.c:717:static int vw_printw(SLcurses_Window_Type *win, const char *fmt, va_list ap)
curs_lib.c:727:int mutt_window_mvprintw(mutt_window_t *win, int row, int col, const char *fmt, ...)
curs_lib.c:745:void mutt_window_clrtoeol(mutt_window_t *win)
curs_lib.c:764:void mutt_window_clearline(mutt_window_t *win, int row)
curs_lib.c:774:void mutt_window_getyx(mutt_window_t *win, int *y, int *x)
curs_lib.c:786:void mutt_show_error(void)
curs_lib.c:797:void mutt_endwin(const char *msg)
curs_lib.c:819:void mutt_perror(const char *s)
curs_lib.c:827:int mutt_any_key_to_continue(const char *s)
curs_lib.c:857:int mutt_do_pager(const char *banner, const char *tempfile, int do_color, pager_t *info)
curs_lib.c:882:int _mutt_enter_fname(const char *prompt, char *buf, size_t blen, int buffy,
curs_lib.c:930:void mutt_unget_event(int ch, int op)
curs_lib.c:943:void mutt_unget_string(char *s)
curs_lib.c:957:void mutt_push_macro_event(int ch, int op)
curs_lib.c:970:void mutt_flush_macro_to_endcond(void)
curs_lib.c:980:void mutt_flushinp(void)
curs_lib.c:993:void mutt_curs_set(int cursor)
curs_lib.c:1010:int mutt_multi_choice(char *prompt, char *letters)
curs_lib.c:1093:int mutt_addwch(wchar_t wc)
curs_lib.c:1114:void mutt_format_string(char *dest, size_t destlen, int min_width, int max_width,
curs_lib.c:1221:static void format_s_x(char *dest, size_t destlen, const char *prefix,
curs_lib.c:1246:void mutt_format_s(char *dest, size_t destlen, const char *prefix, const char *s)
curs_lib.c:1251:void mutt_format_s_tree(char *dest, size_t destlen, const char *prefix, const char *s)
curs_lib.c:1260:void mutt_paddstr(int n, const char *s)
curs_lib.c:1295:size_t mutt_wstr_trunc(const char *src, size_t maxlen, size_t maxwid, size_t *width)
curs_lib.c:1347:int mutt_charlen(const char *s, int *width)
curs_lib.c:1368:int mutt_strwidth(const char *s)
curs_main.c:134:static void collapse_all(MUTTMENU *menu, int toggle)
curs_main.c:188:static int ci_next_undeleted(int msgno)
curs_main.c:198:static int ci_previous_undeleted(int msgno)
curs_main.c:211:static int ci_first_message(void)
curs_main.c:245:static int mx_toggle_write(CONTEXT *ctx)
curs_main.c:270:static void resort_index(MUTTMENU *menu)
curs_main.c:297:void update_index(MUTTMENU *menu, CONTEXT *ctx, int check, int oldcount, int index_hint)
curs_main.c:405:static int main_change_folder(MUTTMENU *menu, int op, char *buf, size_t bufsz,
curs_main.c:490:bool mutt_ts_capability(void)
curs_main.c:536:void mutt_ts_status(char *str)
curs_main.c:544:void mutt_ts_icon(char *str)
curs_main.c:554:void index_make_entry(char *s, size_t l, MUTTMENU *menu, int num)
curs_main.c:622:int index_color(int index_no)
curs_main.c:650:void mutt_draw_statusline(int cols, const char *buf, int buflen)
curs_main.c:799:static void index_menu_redraw(MUTTMENU *menu)
curs_main.c:855:int mutt_index_menu(void)
curs_main.c:3253:void mutt_set_header_color(CONTEXT *ctx, HEADER *curhdr)
date.c:24:static time_t compute_tz(time_t g, struct tm *utc)
date.c:48:time_t mutt_local_tz(time_t t)
date.c:69:time_t mutt_mktime(struct tm *t, int local)
date.c:114:static int is_leap_year_feb(struct tm *tm)
date.c:124:void mutt_normalize_time(struct tm *tm)
doc/makedoc.c:101:static char *skip_ws(char *s)
doc/makedoc.c:113:static char *get_token(char *d, size_t l, char *s)
doc/makedoc.c:208:static int sgml_fputc(int c, FILE *out)
doc/makedoc.c:224:static int sgml_fputs(const char *s, FILE *out)
doc/makedoc.c:235:static int print_it(int special, char *str, FILE *out, int docstat)
doc/makedoc.c:695:static int flush_doc(int docstat, FILE *out)
doc/makedoc.c:726:static int commit_buff(char *buff, char **d, FILE *out, int docstat)
doc/makedoc.c:768:static int sgml_id_fputs(const char *s, FILE *out)
doc/makedoc.c:791:void print_ref(FILE *out, int output_dollar, const char *ref)
doc/makedoc.c:817:static int handle_docline(char *l, FILE *out, int docstat)
doc/makedoc.c:979:static int buff2type(const char *s)
doc/makedoc.c:990:static void pretty_default(char *t, size_t l, const char *s, int type)
doc/makedoc.c:1059:static void char_to_escape(char *dest, unsigned int c)
doc/makedoc.c:1081:static void conf_char_to_escape(unsigned int c, FILE *out)
doc/makedoc.c:1088:static void conf_print_strval(const char *v, FILE *out)
doc/makedoc.c:1104:static const char *type2human(int type)
doc/makedoc.c:1117:static void man_print_strval(const char *v, FILE *out)
doc/makedoc.c:1139:static void sgml_print_strval(const char *v, FILE *out)
doc/makedoc.c:1154:static void print_confline(const char *varname, int type, const char *val, FILE *out)
doc/makedoc.c:1249:static void handle_confline(char *s, FILE *out)
doc/makedoc.c:1338:static void makedoc(FILE *in, FILE *out)
doc/makedoc.c:1387:int main(int argc, char *argv[])
dotlock.c:120:static int dotlock_init_privs(void)
dotlock.c:146:static void BEGIN_PRIVILEGED(void)
dotlock.c:167:static void END_PRIVILEGED(void)
dotlock.c:187:static void usage(const char *av0)
dotlock.c:256:static int dotlock_check_stats(struct stat *fsb, struct stat *lsb)
dotlock.c:285:static void dotlock_expand_link(char *newpath, const char *path, const char *link)
dotlock.c:315:static int dotlock_try(void)
dotlock.c:341:static int dotlock_deference_symlink(char *d, size_t l, const char *path)
dotlock.c:379:static int dotlock_prepare(char *bn, size_t l, const char *f, int _fd)
dotlock.c:443:static int dotlock_lock(const char *realpath)
dotlock.c:546:static int dotlock_unlock(const char *realpath)
dotlock.c:565:static int dotlock_unlink(const char *realpath)
dotlock.c:581:static int dotlock_dispatch(const char *f, int fd)
dotlock.c:616:int dotlock_invoke(const char *path, int fd, int flags, int retry)
dotlock.c:647:int main(int argc, char **argv)
edit.c:59:static char **be_snarf_data(FILE *f, char **buf, int *bufmax, int *buflen,
edit.c:94:static char **be_snarf_file(const char *path, char **buf, int *max, int *len, int verbose)
edit.c:119:static int be_barf_file(const char *path, char **buf, int buflen)
edit.c:138:static void be_free_memory(char **buf, int buflen)
edit.c:146:static char **be_include_messages(char *msg, char **buf, int *bufmax,
edit.c:192:static void be_print_header(ENVELOPE *env)
edit.c:232:static void be_edit_header(ENVELOPE *e, int force)
edit.c:314:int mutt_builtin_editor(const char *path, HEADER *msg, HEADER *cur)
editmsg.c:36:static int edit_one_message(CONTEXT *ctx, HEADER *cur)
editmsg.c:209:int mutt_edit_message(CONTEXT *ctx, HEADER *hdr)
enter.c:34:static int my_wcwidth(wchar_t wc)
enter.c:49:static int my_wcswidth(const wchar_t *s, size_t n)
enter.c:57:static int my_addwch(wchar_t wc)
enter.c:69:static size_t width_ceiling(const wchar_t *s, size_t n, int w1)
enter.c:79:static void my_wcstombs(char *dest, size_t dlen, const wchar_t *src, size_t slen)
enter.c:120:static size_t my_mbstowcs(wchar_t **pwbuf, size_t *pwbuflen, size_t i, char *buf)
enter.c:162:static void replace_part(ENTER_STATE *state, size_t from, char *buf)
enter.c:197:static inline int is_shell_char(wchar_t ch)
enter.c:212:int mutt_enter_string(char *buf, size_t buflen, int col, int flags)
enter.c:238:int _mutt_enter_string(char *buf, size_t buflen, int col, int flags, int multiple,
enter.c:831:void mutt_free_enter_state(ENTER_STATE **esp)
extlib.c:32:void mutt_exit(int code)
filter.c:29:pid_t mutt_create_filter_fd(const char *cmd, FILE **in, FILE **out, FILE **err,
filter.c:172:pid_t mutt_create_filter(const char *s, FILE **in, FILE **out, FILE **err)
filter.c:177:int mutt_wait_filter(pid_t pid)
flags.c:25:void _mutt_set_flag(CONTEXT *ctx, HEADER *h, int flag, int bf, int upd_ctx)
flags.c:318:void mutt_tag_set_flag(int flag, int bf)
flags.c:326:int mutt_thread_set_flag(HEADER *hdr, int flag, int bf, int subthread)
flags.c:370:int mutt_change_flag(HEADER *h, int bf)
from.c:23:static const char *next_word(const char *s)
from.c:31:int mutt_check_month(const char *s)
from.c:41:static bool is_day_name(const char *s)
from.c:58:int is_from(const char *s, char *path, size_t pathlen, time_t *tp)
getdomain.c:27:int getdnsdomainname(char *d, size_t len)
gnupgparse.c:66:static void fix_uid(char *uid)
gnupgparse.c:110:static pgp_key_t parse_pub_line(char *buf, int *is_subkey, pgp_key_t k)
gnupgparse.c:371:pgp_key_t pgp_get_candidates(pgp_ring_t keyring, LIST *hints)
group.c:33:group_t *mutt_pattern_group(const char *k)
group.c:51:static void group_remove(group_t *g)
group.c:62:int mutt_group_context_clear(group_context_t **ctx)
group.c:74:static int empty_group(group_t *g)
group.c:81:void mutt_group_context_add(group_context_t **ctx, group_t *group)
group.c:93:void mutt_group_context_destroy(group_context_t **ctx)
group.c:103:static void group_add_adrlist(group_t *g, ADDRESS *a)
group.c:120:static int group_remove_adrlist(group_t *g, ADDRESS *a)
group.c:135:static int group_add_rx(group_t *g, const char *s, int flags, BUFFER *err)
group.c:140:static int group_remove_rx(group_t *g, const char *s)
group.c:145:void mutt_group_context_add_adrlist(group_context_t *ctx, ADDRESS *a)
group.c:151:int mutt_group_context_remove_adrlist(group_context_t *ctx, ADDRESS *a)
group.c:165:int mutt_group_context_add_rx(group_context_t *ctx, const char *s, int flags, BUFFER *err)
group.c:175:int mutt_group_context_remove_rx(group_context_t *ctx, const char *s)
group.c:189:bool mutt_group_match(group_t *g, const char *s)
handler.c:66:static void print_part_line(STATE *s, BODY *b, int n)
handler.c:81:static void state_prefix_put(const char *d, size_t dlen, STATE *s)
handler.c:90:static void convert_to_state(iconv_t cd, char *bufi, size_t *l, STATE *s)
handler.c:129:static void decode_xbit(STATE *s, long len, int istext, iconv_t cd)
handler.c:166:static int qp_decode_triple(char *s, char *d)
handler.c:184:static void qp_decode_line(char *dest, char *src, size_t *l, int last)
handler.c:250:static void decode_quoted(STATE *s, long len, int istext, iconv_t cd)
handler.c:304:void mutt_decode_base64(STATE *s, long len, int istext, iconv_t cd)
handler.c:391:static unsigned char decode_byte(char ch)
handler.c:398:static void decode_uuencoded(STATE *s, long len, int istext, iconv_t cd)
handler.c:514:static void enriched_wrap(struct enriched_state *stte)
handler.c:624:static void enriched_flush(struct enriched_state *stte, int wrap)
handler.c:651:static void enriched_putwc(wchar_t c, struct enriched_state *stte)
handler.c:717:static void enriched_puts(const char *s, struct enriched_state *stte)
handler.c:734:static void enriched_set_flags(const wchar_t *tag, struct enriched_state *stte)
handler.c:814:static int text_enriched_handler(BODY *a, STATE *s)
handler.c:951:static int is_mmnoask(const char *buf)
handler.c:999:static int is_autoview(BODY *b)
handler.c:1043:static int alternative_handler(BODY *a, STATE *s)
handler.c:1221:static int message_handler(BODY *a, STATE *s)
handler.c:1267:int mutt_can_decode(BODY *a)
handler.c:1303:static int multipart_handler(BODY *a, STATE *s)
handler.c:1367:static int autoview_handler(BODY *a, STATE *s)
handler.c:1498:static int external_body_handler(BODY *b, STATE *s)
handler.c:1592:void mutt_decode_attachment(BODY *b, STATE *s)
handler.c:1641:static int text_plain_handler(BODY *b, STATE *s)
handler.c:1664:static int run_decode_and_handler(BODY *b, STATE *s, handler_t handler, int plaintext)
handler.c:1802:static int valid_pgp_encrypted_handler(BODY *b, STATE *s)
handler.c:1814:static int malformed_pgp_encrypted_handler(BODY *b, STATE *s)
handler.c:1827:int mutt_body_handler(BODY *b, STATE *s)
hash.c:27:static unsigned int gen_string_hash(union hash_key key, unsigned int n)
hash.c:39:static int cmp_string_key(union hash_key a, union hash_key b)
hash.c:44:static unsigned int gen_case_string_hash(union hash_key key, unsigned int n)
hash.c:56:static int cmp_case_string_key(union hash_key a, union hash_key b)
hash.c:61:static unsigned int gen_int_hash(union hash_key key, unsigned int n)
hash.c:66:static int cmp_int_key(union hash_key a, union hash_key b)
hash.c:75:static HASH *new_hash(int nelem)
hash.c:144:static int union_hash_insert(HASH *table, union hash_key key, void *data)
hash.c:186:int hash_insert(HASH *table, const char *strkey, void *data)
hash.c:193:int int_hash_insert(HASH *table, unsigned int intkey, void *data)
hash.c:200:static struct hash_elem *union_hash_find_elem(const HASH *table, union hash_key key)
hash.c:218:static void *union_hash_find(const HASH *table, union hash_key key)
hash.c:227:void *hash_find(const HASH *table, const char *strkey)
hash.c:234:struct hash_elem *hash_find_elem(const HASH *table, const char *strkey)
hash.c:241:void *int_hash_find(const HASH *table, unsigned int intkey)
hash.c:248:struct hash_elem *hash_find_bucket(const HASH *table, const char *strkey)
hash.c:261:static void union_hash_delete(HASH *table, union hash_key key, const void *data,
hash.c:296:void hash_delete(HASH *table, const char *strkey, const void *data, void (*destroy)(void *))
hash.c:303:void int_hash_delete(HASH *table, unsigned int intkey, const void *data,
hash.c:314:void hash_destroy(HASH **ptr, void (*destroy)(void *))
hash.c:341:struct hash_elem *hash_walk(const HASH *table, struct hash_walk_state *state)
hcache_bdb.c:37:static void dbt_init(DBT *dbt, void *data, size_t len)
hcache_bdb.c:45:static void dbt_empty_init(DBT *dbt)
hcache_bdb.c:52:static void *hcache_bdb_open(const char *path)
hcache_bdb.c:115:static void *hcache_bdb_fetch(void *vctx, const char *key, size_t keylen)
hcache_bdb.c:134:static void hcache_bdb_free(void *vctx, void **data)
hcache_bdb.c:139:static int hcache_bdb_store(void *vctx, const char *key, size_t keylen, void *data, size_t dlen)
hcache_bdb.c:159:static int hcache_bdb_delete(void *vctx, const char *key, size_t keylen)
hcache_bdb.c:172:static void hcache_bdb_close(void **vctx)
hcache_bdb.c:187:static const char *hcache_bdb_backend(void)
hcache.c:86:static const hcache_ops_t *hcache_get_backend_ops(const char *backend)
hcache.c:104:static void *lazy_malloc(size_t siz)
hcache.c:112:static void lazy_realloc(void *ptr, size_t siz)
hcache.c:122:static unsigned char *dump_int(unsigned int i, unsigned char *d, int *off)
hcache.c:131:static void restore_int(unsigned int *i, const unsigned char *d, int *off)
hcache.c:137:static inline bool is_ascii(const char *p, size_t len)
hcache.c:149:static unsigned char *dump_char_size(char *c, unsigned char *d, int *off,
hcache.c:182:static unsigned char *dump_char(char *c, unsigned char *d, int *off, int convert)
hcache.c:187:static void restore_char(char **c, const unsigned char *d, int *off, int convert)
hcache.c:215:static unsigned char *dump_address(ADDRESS *a, unsigned char *d, int *off, int convert)
hcache.c:239:static void restore_address(ADDRESS **a, const unsigned char *d, int *off, int convert)
hcache.c:261:static unsigned char *dump_list(LIST *l, unsigned char *d, int *off, int convert)
hcache.c:280:static void restore_list(LIST **l, const unsigned char *d, int *off, int convert)
hcache.c:297:static unsigned char *dump_buffer(BUFFER *b, unsigned char *d, int *off, int convert)
hcache.c:315:static void restore_buffer(BUFFER **b, const unsigned char *d, int *off, int convert)
hcache.c:336:static unsigned char *dump_parameter(PARAMETER *p, unsigned char *d, int *off, int convert)
hcache.c:356:static void restore_parameter(PARAMETER **p, const unsigned char *d, int *off, int convert)
hcache.c:374:static unsigned char *dump_body(BODY *c, unsigned char *d, int *off, int convert)
hcache.c:405:static void restore_body(BODY *c, const unsigned char *d, int *off, int convert)
hcache.c:421:static unsigned char *dump_envelope(ENVELOPE *e, unsigned char *d, int *off, int convert)
hcache.c:460:static void restore_envelope(ENVELOPE *e, const unsigned char *d, int *off, int convert)
hcache.c:500:static int crc_matches(const char *d, unsigned int crc)
hcache.c:520:static bool create_hcache_dir(const char *path)
hcache.c:566:static const char *hcache_per_folder(const char *path, const char *folder, hcache_namer_t namer)
hcache.c:617:static void *hcache_dump(header_cache_t *h, HEADER *header, int *off, unsigned int uidvalidity)
hcache.c:700:static char *get_foldername(const char *folder)
hcache.c:716:header_cache_t *mutt_hcache_open(const char *path, const char *folder, hcache_namer_t namer)
hcache.c:791:void mutt_hcache_close(header_cache_t *h)
hcache.c:802:void *mutt_hcache_fetch(header_cache_t *h, const char *key, size_t keylen)
hcache.c:821:void *mutt_hcache_fetch_raw(header_cache_t *h, const char *key, size_t keylen)
hcache.c:834:void mutt_hcache_free(header_cache_t *h, void **data)
hcache.c:844:int mutt_hcache_store(header_cache_t *h, const char *key, size_t keylen,
hcache.c:862:int mutt_hcache_store_raw(header_cache_t *h, const char *key, size_t keylen,
hcache.c:876:int mutt_hcache_delete(header_cache_t *h, const char *key, size_t keylen)
hcache.c:889:const char *mutt_hcache_backend_list(void)
hcache.c:907:int mutt_hcache_is_valid_backend(const char *s)
hcache_gdbm.c:26:static void *hcache_gdbm_open(const char *path)
hcache_gdbm.c:41:static void *hcache_gdbm_fetch(void *ctx, const char *key, size_t keylen)
hcache_gdbm.c:57:static void hcache_gdbm_free(void *vctx, void **data)
hcache_gdbm.c:62:static int hcache_gdbm_store(void *ctx, const char *key, size_t keylen, void *data, size_t dlen)
hcache_gdbm.c:81:static int hcache_gdbm_delete(void *ctx, const char *key, size_t keylen)
hcache_gdbm.c:96:static void hcache_gdbm_close(void **ctx)
hcache_gdbm.c:105:static const char *hcache_gdbm_backend(void)
hcache_kc.c:26:static void *hcache_kyotocabinet_open(const char *path)
hcache_kc.c:56:static void *hcache_kyotocabinet_fetch(void *ctx, const char *key, size_t keylen)
hcache_kc.c:67:static void hcache_kyotocabinet_free(void *vctx, void **data)
hcache_kc.c:73:static int hcache_kyotocabinet_store(void *ctx, const char *key, size_t keylen,
hcache_kc.c:83:static int hcache_kyotocabinet_delete(void *ctx, const char *key, size_t keylen)
hcache_kc.c:92:static void hcache_kyotocabinet_close(void **ctx)
hcache_kc.c:108:static const char *hcache_kyotocabinet_backend(void)
hcache_lmdb.c:45:static int mdb_get_r_txn(hcache_lmdb_ctx_t *ctx)
hcache_lmdb.c:66:static int mdb_get_w_txn(hcache_lmdb_ctx_t *ctx)
hcache_lmdb.c:88:static void *hcache_lmdb_open(const char *path)
hcache_lmdb.c:142:static void *hcache_lmdb_fetch(void *vctx, const char *key, size_t keylen)
hcache_lmdb.c:178:static void hcache_lmdb_free(void *vctx, void **data)
hcache_lmdb.c:183:static int hcache_lmdb_store(void *vctx, const char *key, size_t keylen, void *data, size_t dlen)
hcache_lmdb.c:216:static int hcache_lmdb_delete(void *vctx, const char *key, size_t keylen)
hcache_lmdb.c:250:static void hcache_lmdb_close(void **vctx)
hcache_lmdb.c:268:static const char *hcache_lmdb_backend(void)
hcache_qdbm.c:28:static void *hcache_qdbm_open(const char *path)
hcache_qdbm.c:38:static void *hcache_qdbm_fetch(void *ctx, const char *key, size_t keylen)
hcache_qdbm.c:47:static void hcache_qdbm_free(void *ctx, void **data)
hcache_qdbm.c:52:static int hcache_qdbm_store(void *ctx, const char *key, size_t keylen, void *data, size_t dlen)
hcache_qdbm.c:61:static int hcache_qdbm_delete(void *ctx, const char *key, size_t keylen)
hcache_qdbm.c:70:static void hcache_qdbm_close(void **ctx)
hcache_qdbm.c:79:static const char *hcache_qdbm_backend(void)
hcache_tc.c:26:static void *hcache_tokyocabinet_open(const char *path)
hcache_tc.c:47:static void *hcache_tokyocabinet_fetch(void *ctx, const char *key, size_t keylen)
hcache_tc.c:58:static void hcache_tokyocabinet_free(void *ctx, void **data)
hcache_tc.c:63:static int hcache_tokyocabinet_store(void *ctx, const char *key, size_t keylen,
hcache_tc.c:73:static int hcache_tokyocabinet_delete(void *ctx, const char *key, size_t keylen)
hcache_tc.c:82:static void hcache_tokyocabinet_close(void **ctx)
hcache_tc.c:98:static const char *hcache_tokyocabinet_backend(void)
hdrline.c:54:bool mutt_is_mail_list(ADDRESS *addr)
hdrline.c:61:bool mutt_is_subscribed_list(ADDRESS *addr)
hdrline.c:73:static bool check_for_mailing_list(ADDRESS *adr, const char *pfx, char *buf, int buflen)
hdrline.c:91:static bool check_for_mailing_list_addr(ADDRESS *adr, char *buf, int buflen)
hdrline.c:106:static bool first_mailing_list(char *buf, size_t buflen, ADDRESS *a)
hdrline.c:124:static size_t add_index_color(char *buf, size_t buflen, format_flag flags, char color)
hdrline.c:166:static const char *make_from_prefix(enum FieldType disp)
hdrline.c:192:static void make_from(ENVELOPE *env, char *buf, size_t len, int do_lists)
hdrline.c:240:static void make_from_addr(ENVELOPE *hdr, char *buf, size_t len, int do_lists)
hdrline.c:265:static bool user_in_addr(ADDRESS *a)
hdrline.c:281:static int user_is_recipient(HEADER *h)
hdrline.c:325:static bool get_initials(const char *name, char *buf, int buflen)
hdrline.c:381:static char *get_nth_wchar(mbchar_table *table, int index)
hdrline.c:392:static char *apply_subject_mods(ENVELOPE *env)
hdrline.c:446:static const char *hdr_format_str(char *dest, size_t destlen, size_t col, int cols,
hdrline.c:1231:void _mutt_make_string(char *dest, size_t destlen, const char *s, CONTEXT *ctx,
hdrline.c:1244:void mutt_make_string_info(char *dst, size_t dstlen, int cols, const char *s,
headers.c:27:void mutt_edit_headers(const char *editor, const char *body, HEADER *msg, char *fcc, size_t fcclen)
headers.c:212:static void label_ref_dec(CONTEXT *ctx, char *label)
headers.c:232:static void label_ref_inc(CONTEXT *ctx, char *label)
headers.c:253:static int label_message(CONTEXT *ctx, HEADER *hdr, char *new)
headers.c:269:int mutt_label_message(HEADER *hdr)
headers.c:314:void mutt_make_label_hash(CONTEXT *ctx)
headers.c:322:void mutt_label_hash_add(CONTEXT *ctx, HEADER *hdr)
headers.c:330:void mutt_label_hash_remove(CONTEXT *ctx, HEADER *hdr)
help.c:29:static const struct binding_t *help_lookup_function(int op, int menu)
help.c:52:void mutt_make_help(char *d, size_t dlen, const char *txt, int menu, int op)
help.c:63:char *mutt_compile_help(char *buf, size_t buflen, int menu, const struct mapping_t *items)
help.c:85:static int print_macro(FILE *f, int maxwidth, const char **macro)
help.c:146:static int get_wrapped_width(const char *t, size_t wid)
help.c:179:static int pad(FILE *f, int col, int i)
help.c:193:static void format_line(FILE *f, int ismacro, const char *t1, const char *t2, const char *t3)
help.c:278:static void dump_menu(FILE *f, int menu)
help.c:309:static bool is_bound(struct keymap_t *map, int op)
help.c:317:static void dump_unbound(FILE *f, const struct binding_t *funcs,
help.c:329:void mutt_help(int menu)
history.c:36:static void init_history(struct history *h)
history.c:57:void mutt_read_histfile(void)
history.c:93:static void shrink_histfile(void)
history.c:163:static void save_history(history_class_t hclass, const char *s)
history.c:204:void mutt_init_history(void)
history.c:217:void mutt_history_add(history_class_t hclass, const char *s, int save)
history.c:247:char *mutt_history_next(history_class_t hclass)
history.c:265:char *mutt_history_prev(history_class_t hclass)
history.c:285:void mutt_reset_history_state(history_class_t hclass)
history.c:295:int mutt_history_at_scratch(history_class_t hclass)
history.c:305:void mutt_history_save_scratch(history_class_t hclass, const char *s)
hook.c:44:int mutt_parse_hook(BUFFER *buf, BUFFER *s, unsigned long data, BUFFER *err)
hook.c:246:static void delete_hook(HOOK *h)
hook.c:259:static void delete_hooks(int type)
hook.c:285:int mutt_parse_unhook(BUFFER *buf, BUFFER *s, unsigned long data, BUFFER *err)
hook.c:321:void mutt_folder_hook(char *path)
hook.c:360:char *mutt_find_hook(int type, const char *pat)
hook.c:373:void mutt_message_hook(CONTEXT *ctx, HEADER *hdr, int type)
hook.c:415:static int addr_hook(char *path, size_t pathlen, int type, CONTEXT *ctx, HEADER *hdr)
hook.c:438:void mutt_default_save(char *path, size_t pathlen, HEADER *hdr)
hook.c:466:void mutt_select_fcc(char *path, size_t pathlen, HEADER *hdr)
hook.c:488:static char *_mutt_string_hook(const char *match, int hook)
hook.c:501:static LIST *_mutt_list_hook(const char *match, int hook)
hook.c:515:char *mutt_charset_hook(const char *chs)
hook.c:520:char *mutt_iconv_hook(const char *chs)
hook.c:531:void mutt_account_hook(const char *url)
hook.c:579:void mutt_timeout_hook(void)
hook.c:614:void mutt_startup_shutdown_hook(int type)
imap/auth_anon.c:26:imap_auth_res_t imap_auth_anon(IMAP_DATA *idata, const char *method)
imap/auth.c:47:int imap_authenticate(IMAP_DATA *idata)
imap/auth_cram.c:33:imap_auth_res_t imap_auth_cram_md5(IMAP_DATA *idata, const char *method)
imap/auth_cram.c:129:static void hmac_md5(const char *password, char *challenge, unsigned char *response)
imap/auth_gss.c:38:static void print_gss_error(OM_uint32 err_maj, OM_uint32 err_min)
imap/auth_gss.c:68:imap_auth_res_t imap_auth_gss(IMAP_DATA *idata, const char *method)
imap/auth_login.c:26:imap_auth_res_t imap_auth_login(IMAP_DATA *idata, const char *method)
imap/auth_plain.c:28:imap_auth_res_t imap_auth_plain(IMAP_DATA *idata, const char *method)
imap/auth_sasl.c:30:imap_auth_res_t imap_auth_sasl(IMAP_DATA *idata, const char *method)
imap/browse.c:34:static void imap_add_folder(char delim, char *folder, int noselect, int noinferiors,
imap/browse.c:111:static int browse_add_list_result(IMAP_DATA *idata, const char *cmd,
imap/browse.c:152:int imap_browse(char *path, struct browser_state *state)
imap/browse.c:316:int imap_mailbox_create(const char *folder)
imap/browse.c:370:int imap_mailbox_rename(const char *mailbox)
imap/command.c:42:static bool cmd_queue_full(IMAP_DATA *idata)
imap/command.c:52:static IMAP_COMMAND *cmd_new(IMAP_DATA *idata)
imap/command.c:75:static int cmd_queue(IMAP_DATA *idata, const char *cmdstr)
imap/command.c:100:static void cmd_handle_fatal(IMAP_DATA *idata)
imap/command.c:122:static int cmd_start(IMAP_DATA *idata, const char *cmdstr, int flags)
imap/command.c:153:static int cmd_status(const char *s)
imap/command.c:167:static void cmd_parse_expunge(IMAP_DATA *idata, const char *s)
imap/command.c:197:static void cmd_parse_fetch(IMAP_DATA *idata, char *s)
imap/command.c:256:static void cmd_parse_capability(IMAP_DATA *idata, char *s)
imap/command.c:283:static void cmd_parse_list(IMAP_DATA *idata, char *s)
imap/command.c:354:static void cmd_parse_lsub(IMAP_DATA *idata, char *s)
imap/command.c:402:static void cmd_parse_myrights(IMAP_DATA *idata, const char *s)
imap/command.c:467:static void cmd_parse_search(IMAP_DATA *idata, const char *s)
imap/command.c:485:static void cmd_parse_status(IMAP_DATA *idata, char *s)
imap/command.c:639:static void cmd_parse_enabled(IMAP_DATA *idata, const char *s)
imap/command.c:652:static int cmd_handle_untagged(IMAP_DATA *idata)
imap/command.c:754:int imap_cmd_start(IMAP_DATA *idata, const char *cmdstr)
imap/command.c:763:int imap_cmd_step(IMAP_DATA *idata)
imap/command.c:866:int imap_code(const char *s)
imap/command.c:872:const char *imap_cmd_trailer(IMAP_DATA *idata)
imap/command.c:907:int imap_exec(IMAP_DATA *idata, const char *cmdstr, int flags)
imap/command.c:946:void imap_cmd_finish(IMAP_DATA *idata)
imap/command.c:987:int imap_cmd_idle(IMAP_DATA *idata)
imap/imap.c:47:static void imap_set_flag(IMAP_DATA *idata, int aclbit, int flag,
imap/imap.c:53:int imap_access(const char *path, int flags)
imap/imap.c:110:int imap_create_mailbox(IMAP_DATA *idata, char *mailbox)
imap/imap.c:126:int imap_rename_mailbox(IMAP_DATA *idata, IMAP_MBOX *mx, const char *newname)
imap/imap.c:143:int imap_delete_mailbox(CONTEXT *ctx, IMAP_MBOX *mx)
imap/imap.c:172:void imap_logout_all(void)
imap/imap.c:198:int imap_read_literal(FILE *fp, IMAP_DATA *idata, long bytes, progress_t *pbar)
imap/imap.c:244:void imap_expunge_mailbox(IMAP_DATA *idata)
imap/imap.c:295:static int imap_check_capabilities(IMAP_DATA *idata)
imap/imap.c:401:int imap_open_connection(IMAP_DATA *idata)
imap/imap.c:487:void imap_close_connection(IMAP_DATA *idata)
imap/imap.c:500:static char *imap_get_flags(LIST **hflags, char *s)
imap/imap.c:552:static int imap_open_mailbox(CONTEXT *ctx)
imap/imap.c:768:static int imap_open_mailbox_append(CONTEXT *ctx, int flags)
imap/imap.c:813:void imap_logout(IMAP_DATA **idata)
imap/imap.c:826:static int imap_open_new_message(MESSAGE *msg, CONTEXT *dest, HEADER *hdr)
imap/imap.c:842:static void imap_set_flag(IMAP_DATA *idata, int aclbit, int flag,
imap/imap.c:852:bool imap_has_flag(LIST *flag_list, const char *flag)
imap/imap.c:874:static int imap_make_msg_set(IMAP_DATA *idata, BUFFER *buf, int flag,
imap/imap.c:967:int imap_exec_msgset(IMAP_DATA *idata, const char *pre, const char *post,
imap/imap.c:1032:static bool compare_flags(HEADER *h)
imap/imap.c:1051:int imap_sync_message(IMAP_DATA *idata, HEADER *hdr, BUFFER *cmd, int *err_continue)
imap/imap.c:1122:static int sync_helper(IMAP_DATA *idata, int right, int flag, const char *name)
imap/imap.c:1155:int imap_sync_mailbox(CONTEXT *ctx, int expunge)
imap/imap.c:1347:int imap_close_mailbox(CONTEXT *ctx)
imap/imap.c:1403:int imap_check_mailbox(CONTEXT *ctx, int force)
imap/imap.c:1408:int imap_check(IMAP_DATA *idata, int force)
imap/imap.c:1458:static int imap_check_mailbox_reopen(CONTEXT *ctx, int *index_hint)
imap/imap.c:1471:static int imap_get_mailbox(const char *path, IMAP_DATA **hidata, char *buf, size_t blen)
imap/imap.c:1498:int imap_buffy_check(int force, int check_stats)
imap/imap.c:1590:int imap_status(char *path, int queue)
imap/imap.c:1693:void imap_mboxcache_free(IMAP_DATA *idata)
imap/imap.c:1710:static int do_search(const pattern_t *search, int allpats)
imap/imap.c:1740:static int imap_compile_search(const pattern_t *pat, BUFFER *buf)
imap/imap.c:1822:int imap_search(CONTEXT *ctx, const pattern_t *pat)
imap/imap.c:1851:int imap_subscribe(char *path, int subscribe)
imap/imap.c:1910:static int longest_common_prefix(char *dest, const char *src, int start, size_t dlen)
imap/imap.c:1923:static int imap_complete_hosts(char *dest, size_t len)
imap/imap.c:1975:int imap_complete(char *dest, size_t dlen, char *path)
imap/imap.c:2067:int imap_fast_trash(CONTEXT *ctx, char *dest)
imap/message.c:36:static void imap_update_context(IMAP_DATA *idata, int oldmsgcount)
imap/message.c:53:static body_cache_t *msg_cache_open(IMAP_DATA *idata)
imap/message.c:65:static FILE *msg_cache_get(IMAP_DATA *idata, HEADER *h)
imap/message.c:77:static FILE *msg_cache_put(IMAP_DATA *idata, HEADER *h)
imap/message.c:89:static int msg_cache_commit(IMAP_DATA *idata, HEADER *h)
imap/message.c:102:static int msg_cache_clean_cb(const char *id, body_cache_t *bcache, void *data)
imap/message.c:126:static char *msg_parse_flags(IMAP_HEADER *h, char *s)
imap/message.c:210:static int msg_parse_fetch(IMAP_HEADER *h, char *s)
imap/message.c:289:static int msg_fetch_header(CONTEXT *ctx, IMAP_HEADER *h, char *buf, FILE *fp)
imap/message.c:343:static void flush_buffer(char *buf, size_t *len, CONNECTION *conn)
imap/message.c:355:int imap_read_headers(IMAP_DATA *idata, int msgbegin, int msgend)
imap/message.c:691:int imap_fetch_message(CONTEXT *ctx, MESSAGE *msg, int msgno)
imap/message.c:903:int imap_close_message(CONTEXT *ctx, MESSAGE *msg)
imap/message.c:908:int imap_commit_message(CONTEXT *ctx, MESSAGE *msg)
imap/message.c:918:int imap_append_message(CONTEXT *ctx, MESSAGE *msg)
imap/message.c:1056:int imap_copy_messages(CONTEXT *ctx, HEADER *h, char *dest, int delete)
imap/message.c:1230:int imap_cache_del(IMAP_DATA *idata, HEADER *h)
imap/message.c:1242:int imap_cache_clean(IMAP_DATA *idata)
imap/message.c:1252:void imap_add_keywords(char *s, HEADER *h, LIST *mailbox_flags, size_t slen)
imap/message.c:1273:void imap_free_header_data(IMAP_HEADER_DATA **data)
imap/message.c:1285:char *imap_set_flags(IMAP_DATA *idata, HEADER *h, char *s)
imap/utf7.c:53:static char *utf7_to_utf8(const char *u7, size_t u7len, char **u8, size_t *u8len)
imap/utf7.c:145:static char *utf8_to_utf7(const char *u8, size_t u8len, char **u7, size_t *u7len)
imap/utf7.c:251:void imap_utf_encode(IMAP_DATA *idata, char **s)
imap/utf7.c:268:void imap_utf_decode(IMAP_DATA *idata, char **s)
imap/util.c:48:int imap_expand_path(char *path, size_t len)
imap/util.c:78:void imap_get_parent(char *output, const char *mbox, size_t olen, char delim)
imap/util.c:119:void imap_get_parent_path(char *output, const char *path, size_t olen)
imap/util.c:152:void imap_clean_path(char *path, size_t plen)
imap/util.c:173:static int imap_hcache_namer(const char *path, char *dest, size_t dlen)
imap/util.c:178:header_cache_t *imap_hcache_open(IMAP_DATA *idata, const char *path)
imap/util.c:203:void imap_hcache_close(IMAP_DATA *idata)
imap/util.c:235:int imap_hcache_put(IMAP_DATA *idata, HEADER *h)
imap/util.c:246:int imap_hcache_del(IMAP_DATA *idata, unsigned int uid)
imap/util.c:261:int imap_parse_path(const char *path, IMAP_MBOX *mx)
imap/util.c:366:int imap_mxcmp(const char *mx1, const char *mx2)
imap/util.c:395:void imap_pretty_mailbox(char *path)
imap/util.c:452:int imap_continue(const char *msg, const char *resp)
imap/util.c:459:void imap_error(const char *where, const char *msg)
imap/util.c:485:void imap_free_idata(IMAP_DATA **idata)
imap/util.c:508:char *imap_fix_path(IMAP_DATA *idata, const char *mailbox, char *path, size_t plen)
imap/util.c:543:void imap_cachepath(IMAP_DATA *idata, const char *mailbox, char *dest, size_t dlen)
imap/util.c:570:int imap_get_literal_count(const char *buf, long *bytes)
imap/util.c:590:char *imap_get_qualifier(char *buf)
imap/util.c:603:char *imap_next_word(char *s)
imap/util.c:628:time_t imap_parse_date(char *s)
imap/util.c:677:void imap_make_date(char *buf, time_t timestamp)
imap/util.c:691:void imap_qualify_path(char *dest, size_t len, IMAP_MBOX *mx, char *path)
imap/util.c:704:void imap_quote_string(char *dest, size_t dlen, const char *src)
imap/util.c:738:void imap_unquote_string(char *s)
imap/util.c:772:void imap_munge_mbox_name(IMAP_DATA *idata, char *dest, size_t dlen, const char *src)
imap/util.c:784:void imap_unmunge_mbox_name(IMAP_DATA *idata, char *s)
imap/util.c:801:int imap_wordcasecmp(const char *a, const char *b)
imap/util.c:828:static void alrm_handler(int sig)
imap/util.c:833:void imap_keepalive(void)
imap/util.c:852:int imap_wait_keepalive(pid_t pid)
imap/util.c:897:void imap_allow_reopen(CONTEXT *ctx)
imap/util.c:908:void imap_disallow_reopen(CONTEXT *ctx)
imap/util.c:919:int imap_account_match(const ACCOUNT *a1, const ACCOUNT *a2)
init.c:68:static void myvar_set(const char *var, const char *val)
init.c:85:static void myvar_del(const char *var)
init.c:114:static void toggle_quadoption(int opt)
init.c:122:static int parse_regex(int idx, BUFFER *tmp, BUFFER *err)
init.c:173:void set_quadoption(int opt, int flag)
init.c:182:int quadoption(int opt)
init.c:190:int query_quadoption(int opt, const char *prompt)
init.c:211:int mutt_option_index(const char *s)
init.c:224:int mutt_option_to_string(const struct option_t *opt, char *val, size_t len)
init.c:233:const struct option_t *mutt_option_get(const char *s)
init.c:257:static void free_mbchar_table(mbchar_table **t)
init.c:268:static mbchar_table *parse_mbchar_table(const char *s)
init.c:309:static int parse_sort(short *val, const char *s, const struct mapping_t *map, BUFFER *err)
init.c:337:int mutt_option_set(const struct option_t *val, BUFFER *err)
init.c:480:static void free_opt(struct option_t *p)
init.c:506:void mutt_free_opts(void)
init.c:522:static void add_to_list(LIST **list, const char *str)
init.c:557:static RX_LIST *new_rx_list(void)
init.c:562:int mutt_add_to_rx_list(RX_LIST **list, const char *s, int flags, BUFFER *err)
init.c:607:static int remove_from_replace_list(REPLACE_LIST **list, const char *pat)
init.c:644:static REPLACE_LIST *new_replace_list(void)
init.c:649:static int add_to_replace_list(REPLACE_LIST **list, const char *pat,
init.c:734:static void remove_from_list(LIST **l, const char *str)
init.c:777:static int finish_source(BUFFER *tmp, BUFFER *s, unsigned long data, BUFFER *err)
init.c:809:static int parse_ifdef(BUFFER *tmp, BUFFER *s, unsigned long data, BUFFER *err)
init.c:884:static int parse_unignore(BUFFER *buf, BUFFER *s, unsigned long data, BUFFER *err)
init.c:900:static int parse_ignore(BUFFER *buf, BUFFER *s, unsigned long data, BUFFER *err)
init.c:912:static int parse_list(BUFFER *buf, BUFFER *s, unsigned long data, BUFFER *err)
init.c:923:static void _alternates_clean(void)
init.c:933:static int parse_alternates(BUFFER *buf, BUFFER *s, unsigned long data, BUFFER *err)
init.c:963:static int parse_unalternates(BUFFER *buf, BUFFER *s, unsigned long data, BUFFER *err)
init.c:980:static int parse_replace_list(BUFFER *buf, BUFFER *s, unsigned long data, BUFFER *err)
init.c:1013:static int parse_unreplace_list(BUFFER *buf, BUFFER *s, unsigned long data, BUFFER *err)
init.c:1038:static void clear_subject_mods(void)
init.c:1049:static int parse_subjectrx_list(BUFFER *buf, BUFFER *s, unsigned long data, BUFFER *err)
init.c:1060:static int parse_unsubjectrx_list(BUFFER *buf, BUFFER *s, unsigned long data, BUFFER *err)
init.c:1071:static int parse_spam_list(BUFFER *buf, BUFFER *s, unsigned long data, BUFFER *err)
init.c:1146:static int parse_unlist(BUFFER *buf, BUFFER *s, unsigned long data, BUFFER *err)
init.c:1166:static int parse_path_list(BUFFER *buf, BUFFER *s, unsigned long data, BUFFER *err)
init.c:1181:static int parse_path_unlist(BUFFER *buf, BUFFER *s, unsigned long data, BUFFER *err)
init.c:1205:static int parse_lists(BUFFER *buf, BUFFER *s, unsigned long data, BUFFER *err)
init.c:1235:static int parse_group(BUFFER *buf, BUFFER *s, unsigned long data, BUFFER *err)
init.c:1307:static void _attachments_clean(void)
init.c:1317:static int parse_attach_list(BUFFER *buf, BUFFER *s, LIST **ldata, BUFFER *err)
init.c:1405:static int parse_unattach_list(BUFFER *buf, BUFFER *s, LIST **ldata, BUFFER *err)
init.c:1475:static int print_attach_list(LIST *lp, char op, char *name)
init.c:1488:static int parse_attachments(BUFFER *buf, BUFFER *s, unsigned long data, BUFFER *err)
init.c:1544:static int parse_unattachments(BUFFER *buf, BUFFER *s, unsigned long data, BUFFER *err)
init.c:1586:static int parse_unlists(BUFFER *buf, BUFFER *s, unsigned long data, BUFFER *err)
init.c:1602:static int parse_subscribe(BUFFER *buf, BUFFER *s, unsigned long data, BUFFER *err)
init.c:1632:static int parse_unsubscribe(BUFFER *buf, BUFFER *s, unsigned long data, BUFFER *err)
init.c:1647:static int parse_unalias(BUFFER *buf, BUFFER *s, unsigned long data, BUFFER *err)
init.c:1693:static int parse_alias(BUFFER *buf, BUFFER *s, unsigned long data, BUFFER *err)
init.c:1780:static int parse_unmy_hdr(BUFFER *buf, BUFFER *s, unsigned long data, BUFFER *err)
init.c:1825:static int parse_my_hdr(BUFFER *buf, BUFFER *s, unsigned long data, BUFFER *err)
init.c:1868:static void set_default(struct option_t *p)
init.c:1903:static void restore_default(struct option_t *p)
init.c:2008:static size_t escape_string(char *dst, size_t len, const char *src)
init.c:2047:static void pretty_var(char *dst, size_t len, const char *option, const char *val)
init.c:2068:static int check_charset(struct option_t *opt, const char *val)
init.c:2092:static bool valid_show_multipart_alternative(const char *val)
init.c:2098:char **mutt_envlist(void)
init.c:2107:void mutt_envlist_set(const char *name, const char *value, int overwrite)
init.c:2145:static int parse_setenv(BUFFER *tmp, BUFFER *s, unsigned long data, BUFFER *err)
init.c:2243:static int parse_set(BUFFER *tmp, BUFFER *s, unsigned long data, BUFFER *err)
init.c:2818:static int to_absolute_path(char *path, const char *reference)
init.c:2855:static int source_rc(const char *rcfile_path, BUFFER *err)
init.c:2961:static int parse_source(BUFFER *tmp, BUFFER *s, unsigned long data, BUFFER *err)
init.c:2990:int mutt_parse_rc_line(/* const */ char *line, BUFFER *token, BUFFER *err)
init.c:3048:static char Completed[STRING] = {0}; /* completed string (command or variable) */
init.c:3053:static void matches_ensure_morespace(int current)
init.c:3076:static void candidate(char *dest, char *try, const char *src, int len)
init.c:3099:const struct command_t *mutt_command_get(const char *s)
init.c:3108:void mutt_commands_apply(void *data, void (*application)(void *, const struct command_t *))
init.c:3114:int mutt_command_complete(char *buffer, size_t len, int pos, int numtabs)
init.c:3268:int mutt_var_value_complete(char *buffer, size_t len, int pos)
init.c:3322:static int complete_all_nm_tags(const char *pt)
init.c:3377:static const char *rstrnstr(const char *haystack, size_t haystack_length, const char *needle)
init.c:3399:bool mutt_nm_query_complete(char *buffer, size_t len, int pos, int numtabs)
init.c:3444:bool mutt_nm_tag_complete(char *buffer, size_t len, int pos, int numtabs)
init.c:3490:int var_to_string(int idx, char *val, size_t len)
init.c:3587:int mutt_query_variables(LIST *queries)
init.c:3622:int mutt_dump_variables(int hide_sensitive)
init.c:3664:const char *mutt_getnamebyvalue(int val, const struct mapping_t *map)
init.c:3674:int mutt_getvaluebyname(const char *name, const struct mapping_t *map)
init.c:3685:static void start_debug(void)
init.c:3707:static int execute_commands(LIST *p)
init.c:3732:static char *find_cfg(const char *home, const char *xdg_cfg_home)
init.c:3776:void mutt_init(int skip_sys_rc, LIST *commands)
init.c:4134:int mutt_get_hook_type(const char *name)
init.c:4144:static int parse_group_context(group_context_t **ctx, BUFFER *buf, BUFFER *s,
init.c:4176:static int parse_tag_transforms(BUFFER *b, BUFFER *s, unsigned long data, BUFFER *err)
init.c:4211:static int parse_tag_formats(BUFFER *b, BUFFER *s, unsigned long data, BUFFER *err)
init.c:4247:const char *myvar_get(const char *var)
init.c:4258:int mutt_label_complete(char *buffer, size_t len, int numtabs)
keymap.c:123:static struct keymap_t *alloc_keys(int len, keycode_t *keys)
keymap.c:134:static int parse_fkey(char *s)
keymap.c:158:static int parse_keycode(const char *s)
keymap.c:174:static int parsekeys(const char *str, keycode_t *d, int max)
keymap.c:227:void km_bind(char *s, int menu, int op, char *macro, char *descr)
keymap.c:288:static void km_bindkey(char *s, int menu, int op)
keymap.c:293:static int get_op(const struct binding_t *bindings, const char *start, size_t len)
keymap.c:307:static char *get_func(const struct binding_t *bindings, int op)
keymap.c:324:static void generic_tokenize_push_string(char *s, void (*generic_push)(int, int))
keymap.c:393:static int retry_generic(int menu, keycode_t *keys, int keyslen, int lastkey)
keymap.c:416:int km_dokey(int menu)
keymap.c:550:static void create_bindings(const struct binding_t *map, int menu)
keymap.c:559:static const char *km_keyname(int c)
keymap.c:590:int km_expand_key(char *s, size_t len, struct keymap_t *map)
keymap.c:612:struct keymap_t *km_find_func(int menu, int func)
keymap.c:666:static const char *find_ext_name(const char *key)
keymap.c:686:void init_extended_keys(void)
keymap.c:714:void km_init(void)
keymap.c:834:void km_error_key(int menu)
keymap.c:860:int mutt_parse_push(BUFFER *buf, BUFFER *s, unsigned long data, BUFFER *err)
keymap.c:876:char *parse_keymap(int *menu, BUFFER *s, int maxmenus, int *nummenus, BUFFER *err)
keymap.c:927:static int try_bind(char *key, int menu, char *func, const struct binding_t *bindings)
keymap.c:940:const struct binding_t *km_get_table(int menu)
keymap.c:984:int mutt_parse_bind(BUFFER *buf, BUFFER *s, unsigned long data, BUFFER *err)
keymap.c:1030:int mutt_parse_macro(BUFFER *buf, BUFFER *s, unsigned long data, BUFFER *err)
keymap.c:1081:int mutt_parse_exec(BUFFER *buf, BUFFER *s, unsigned long data, BUFFER *err)
keymap.c:1125:void mutt_what_key(void)
lib.c:99:void mutt_nocurses_error(const char *fmt, ...)
lib.c:109:void *safe_calloc(size_t nmemb, size_t size)
lib.c:132:void *safe_malloc(size_t siz)
lib.c:147:void safe_realloc(void *ptr, size_t siz)
lib.c:180:void safe_free(void *ptr) /* __SAFE_FREE_CHECKED__ */
lib.c:192:int safe_fclose(FILE **f)
lib.c:203:int safe_fsync_close(FILE **f)
lib.c:223:char *safe_strdup(const char *s)
lib.c:236:char *safe_strcat(char *d, size_t l, const char *s)
lib.c:255:char *safe_strncat(char *d, size_t l, const char *s, size_t sl)
lib.c:275:void mutt_str_replace(char **p, const char *s)
lib.c:281:void mutt_str_adjust(char **p)
lib.c:289:char *mutt_strlower(char *s)
lib.c:314:const char *mutt_strchrnul(const char *s, char c)
lib.c:321:void mutt_unlink(const char *s)
lib.c:363:int mutt_copy_bytes(FILE *in, FILE *out, size_t size)
lib.c:385:int mutt_copy_stream(FILE *fin, FILE *fout)
lib.c:401:static bool compare_stat(struct stat *osb, struct stat *nsb)
lib.c:411:int safe_symlink(const char *oldpath, const char *newpath)
lib.c:455:int safe_rename(const char *src, const char *target)
lib.c:553:static int mkwrapdir(const char *path, char *newfile, size_t nflen, char *newdir, size_t ndlen)
lib.c:589:int mutt_rmtree(const char *path)
lib.c:628:static int put_file_in_place(const char *path, const char *safe_file, const char *safe_dir)
lib.c:638:int safe_open(const char *path, int flags)
lib.c:707:void mutt_sanitize_filename(char *f, short slash)
lib.c:723:int mutt_rx_sanitize_string(char *dest, size_t destlen, const char *src)
lib.c:748:char *mutt_read_line(char *s, size_t *size, FILE *fp, int *line, int flags)
lib.c:806:char *mutt_substrcpy(char *dest, const char *beg, const char *end, size_t destlen)
lib.c:818:char *mutt_substrdup(const char *begin, const char *end)
lib.c:837:size_t mutt_quote_filename(char *d, size_t l, const char *f)
lib.c:873:int mutt_strcmp(const char *a, const char *b)
lib.c:878:int mutt_strcasecmp(const char *a, const char *b)
lib.c:883:int mutt_strncmp(const char *a, const char *b, size_t l)
lib.c:888:int mutt_strncasecmp(const char *a, const char *b, size_t l)
lib.c:893:size_t mutt_strlen(const char *a)
lib.c:898:int mutt_strcoll(const char *a, const char *b)
lib.c:903:const char *mutt_stristr(const char *haystack, const char *needle)
lib.c:924:char *mutt_skip_whitespace(char *p)
lib.c:930:void mutt_remove_trailing_ws(char *s)
lib.c:943:char *mutt_concatn_path(char *dst, size_t dstlen, const char *dir,
lib.c:984:char *mutt_concat_path(char *d, const char *dir, const char *fname, size_t l)
lib.c:995:const char *mutt_basename(const char *f)
lib.c:1004:const char *mutt_strsysexit(int e)
lib.c:1021:void mutt_debug(int level, const char *fmt, ...)
lib.c:1043:static int mutt_atol(const char *str, long *dst)
lib.c:1062:int mutt_atos(const char *str, short *dst)
lib.c:1080:int mutt_atoi(const char *str, int *dst)
lib.c:1121:int mutt_inbox_cmp(const char *a, const char *b)
lib.c:1159:char *strfcpy(char *dest, const char *src, size_t dlen)
lib.c:1183:int mutt_mkdir(const char *path, mode_t mode)
main.c:66:void mutt_exit(int code)
main.c:73:static void usage(void)
main.c:126:static void start_curses(void)
main.c:173:int main(int argc, char **argv, char **environ)
mbox.c:51:static int mbox_lock_mailbox(CONTEXT *ctx, int excl, int retry)
mbox.c:66:static void mbox_unlock_mailbox(CONTEXT *ctx)
mbox.c:77:static int mmdf_parse_mailbox(CONTEXT *ctx)
mbox.c:242:static int mbox_parse_mailbox(CONTEXT *ctx)
mbox.c:437:static int mbox_open_mailbox(CONTEXT *ctx)
mbox.c:466:static int mbox_open_mailbox_append(CONTEXT *ctx, int flags)
mbox.c:487:static int mbox_close_mailbox(CONTEXT *ctx)
mbox.c:505:static int mbox_open_message(CONTEXT *ctx, MESSAGE *msg, int msgno)
mbox.c:512:static int mbox_close_message(CONTEXT *ctx, MESSAGE *msg)
mbox.c:519:static int mbox_commit_message(CONTEXT *ctx, MESSAGE *msg)
mbox.c:533:static int mmdf_commit_message(CONTEXT *ctx, MESSAGE *msg)
mbox.c:547:static int mbox_open_new_message(MESSAGE *msg, CONTEXT *dest, HEADER *hdr)
mbox.c:554:static int strict_addrcmp(const ADDRESS *a, const ADDRESS *b)
mbox.c:571:static int strict_cmp_lists(const LIST *a, const LIST *b)
mbox.c:587:static int strict_cmp_envelopes(const ENVELOPE *e1, const ENVELOPE *e2)
mbox.c:611:static int strict_cmp_parameters(const PARAMETER *p1, const PARAMETER *p2)
mbox.c:628:static int strict_cmp_bodies(const BODY *b1, const BODY *b2)
mbox.c:639:int mbox_strict_cmp_headers(const HEADER *h1, const HEADER *h2)
mbox.c:662:static int reopen_mailbox(CONTEXT *ctx, int *index_hint)
mbox.c:848:static int mbox_check_mailbox(CONTEXT *ctx, int *index_hint)
mbox.c:957:static bool mbox_has_new(CONTEXT *ctx)
mbox.c:969:void mbox_reset_atime(CONTEXT *ctx, struct stat *st)
mbox.c:998:static int mbox_sync_mailbox(CONTEXT *ctx, int *index_hint)
mbox.c:1373:int mbox_check_empty(const char *path)
mbyte.c:42:void mutt_set_charset(char *charset)
mbyte.c:91:static size_t utf8rtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *_ps)
mbyte.c:189:static size_t wcrtomb_iconv(char *s, wchar_t wc, iconv_t cd)
mbyte.c:217:size_t wcrtomb(char *s, wchar_t wc, mbstate_t *ps)
mbyte.c:241:static size_t mbrtowc_iconv(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps, iconv_t cd)
mbyte.c:316:size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
mbyte.c:342:int iswprint(wint_t wc)
mbyte.c:350:int iswspace(wint_t wc)
mbyte.c:358:static wint_t towupper_ucs(wint_t x)
mbyte.c:373:static int iswupper_ucs(wint_t x)
mbyte.c:390:static wint_t towlower_ucs(wint_t x)
mbyte.c:401:static int iswalnum_ucs(wint_t wc)
mbyte.c:418:static int iswalpha_ucs(wint_t wc)
mbyte.c:433:wint_t towupper(wint_t wc)
mbyte.c:441:wint_t towlower(wint_t wc)
mbyte.c:449:int iswalnum(wint_t wc)
mbyte.c:457:int iswalpha(wint_t wc)
mbyte.c:465:int iswupper(wint_t wc)
mbyte.c:478:static int wcwidth_ja(wchar_t ucs)
mbyte.c:494:int wcwidth(wchar_t wc)
mbyte.c:521:wchar_t replacement_char(void)
mbyte.c:526:bool is_display_corrupting_utf8(wchar_t wc)
mbyte.c:540:int mutt_filter_unprintable(char **s)
md5.c:70:void md5_init_ctx(struct md5_ctx *ctx)
md5.c:84:static inline void set_uint32(char *cp, md5_uint32 v)
md5.c:91:void *md5_read_ctx(const struct md5_ctx *ctx, void *resbuf)
md5.c:104:void *md5_finish_ctx(struct md5_ctx *ctx, void *resbuf)
md5.c:130:int md5_stream(FILE *stream, void *resblock)
md5.c:196:void *md5_buffer(const char *buffer, size_t len, void *resblock)
md5.c:211:void md5_process_bytes(const void *buffer, size_t len, struct md5_ctx *ctx)
md5.c:287:void md5_process_block(const void *buffer, size_t len, struct md5_ctx *ctx)
md5.c:445:int main(void)
menu.c:34:static int get_color(int index, unsigned char *s)
menu.c:75:static void print_enriched_string(int index, int attr, unsigned char *s, int do_color)
menu.c:242:static void menu_make_entry(char *s, int l, MUTTMENU *menu, int i)
menu.c:253:static void menu_pad_string(MUTTMENU *menu, char *s, size_t n)
menu.c:264:void menu_redraw_full(MUTTMENU *menu)
menu.c:292:void menu_redraw_status(MUTTMENU *menu)
menu.c:305:void menu_redraw_sidebar(MUTTMENU *menu)
menu.c:312:void menu_redraw_index(MUTTMENU *menu)
menu.c:359:void menu_redraw_motion(MUTTMENU *menu)
menu.c:410:void menu_redraw_current(MUTTMENU *menu)
menu.c:434:static void menu_redraw_prompt(MUTTMENU *menu)
menu.c:452:void menu_check_recenter(MUTTMENU *menu)
menu.c:494:static void menu_jump(MUTTMENU *menu)
menu.c:519:void menu_next_line(MUTTMENU *menu)
menu.c:541:void menu_prev_line(MUTTMENU *menu)
menu.c:563:static void menu_length_jump(MUTTMENU *menu, int jumplen)
menu.c:604:void menu_next_page(MUTTMENU *menu)
menu.c:609:void menu_prev_page(MUTTMENU *menu)
menu.c:614:void menu_half_down(MUTTMENU *menu)
menu.c:619:void menu_half_up(MUTTMENU *menu)
menu.c:624:void menu_top_page(MUTTMENU *menu)
menu.c:633:void menu_bottom_page(MUTTMENU *menu)
menu.c:646:void menu_middle_page(MUTTMENU *menu)
menu.c:662:void menu_first_entry(MUTTMENU *menu)
menu.c:673:void menu_last_entry(MUTTMENU *menu)
menu.c:684:void menu_current_top(MUTTMENU *menu)
menu.c:695:void menu_current_middle(MUTTMENU *menu)
menu.c:708:void menu_current_bottom(MUTTMENU *menu)
menu.c:721:static void menu_next_entry(MUTTMENU *menu)
menu.c:732:static void menu_prev_entry(MUTTMENU *menu)
menu.c:743:static int default_color(int i)
menu.c:748:static int menu_search_generic(MUTTMENU *m, regex_t *re, int n)
menu.c:756:void mutt_menu_init(void)
menu.c:787:void mutt_menu_destroy(MUTTMENU **p)
menu.c:802:static MUTTMENU *get_current_menu(void)
menu.c:807:void mutt_push_current_menu(MUTTMENU *menu)
menu.c:819:void mutt_pop_current_menu(MUTTMENU *menu)
menu.c:842:void mutt_set_current_menu_redraw(int redraw)
menu.c:851:void mutt_set_current_menu_redraw_full(void)
menu.c:860:void mutt_set_menu_redraw_full(int menu_type)
menu.c:866:void mutt_current_menu_redraw()
menu.c:886:static int menu_search(MUTTMENU *menu, int op)
menu.c:951:static int menu_dialog_translate_op(int i)
menu.c:972:static int menu_dialog_dokey(MUTTMENU *menu, int *ip)
menu.c:997:int menu_redraw(MUTTMENU *menu)
menu.c:1035:int mutt_menu_loop(MUTTMENU *menu)
mh.c:89:static inline struct mh_data *mh_data(CONTEXT *ctx)
mh.c:94:static void mhs_alloc(struct mh_sequences *mhs, int i)
mh.c:111:static void mhs_free_sequences(struct mh_sequences *mhs)
mh.c:116:static short mhs_check(struct mh_sequences *mhs, int i)
mh.c:124:static short mhs_set(struct mh_sequences *mhs, int i, short f)
mh.c:131:static int mh_read_token(char *t, int *first, int *last)
mh.c:149:static int mh_read_sequences(struct mh_sequences *mhs, const char *path)
mh.c:201:static inline mode_t mh_umask(CONTEXT *ctx)
mh.c:223:static int mh_sequences_changed(BUFFY *b)
mh.c:239:static int mh_already_notified(BUFFY *b, int msgno)
mh.c:254:static bool mh_valid_message(const char *s)
mh.c:268:int mh_buffy(BUFFY *mailbox, int check_stats)
mh.c:345:static int mh_mkstemp(CONTEXT *dest, FILE **fp, char **tgt)
mh.c:384:static void mhs_write_one_sequence(FILE *fp, struct mh_sequences *mhs, short f,
mh.c:427:static void mh_update_sequences(CONTEXT *ctx)
mh.c:536:static void mh_sequences_add_one(CONTEXT *ctx, int n, short unseen, short flagged, short replied)
mh.c:605:static void mh_update_maildir(struct maildir *md, struct mh_sequences *mhs)
mh.c:629:static void maildir_free_entry(struct maildir **md)
mh.c:641:static void maildir_free_maildir(struct maildir **md)
mh.c:655:void maildir_parse_flags(HEADER *h, const char *path)
mh.c:711:static void maildir_update_mtime(CONTEXT *ctx)
mh.c:790:static int maildir_parse_dir(CONTEXT *ctx, struct maildir ***last,
mh.c:861:static bool maildir_add_to_context(CONTEXT *ctx, struct maildir *md)
mh.c:898:static int maildir_move_to_context(CONTEXT *ctx, struct maildir **md)
mh.c:907:static size_t maildir_hcache_keylen(const char *fn)
mh.c:915:static int md_cmp_inode(struct maildir *a, struct maildir *b)
mh.c:921:static int md_cmp_path(struct maildir *a, struct maildir *b)
mh.c:929:static struct maildir *maildir_merge_lists(struct maildir *left, struct maildir *right,
mh.c:985:static struct maildir *maildir_ins_sort(struct maildir *list,
mh.c:1016:static struct maildir *maildir_sort(struct maildir *list, size_t len,
mh.c:1051:static void mh_sort_natural(CONTEXT *ctx, struct maildir **md)
mh.c:1060:static struct maildir *skip_duplicates(struct maildir *p, struct maildir **last)
mh.c:1084:static void maildir_delayed_parsing(CONTEXT *ctx, struct maildir **md, progress_t *progress)
mh.c:1214:static int mh_close_mailbox(CONTEXT *ctx)
mh.c:1228:static int mh_read_dir(CONTEXT *ctx, const char *subdir)
mh.c:1286:static int maildir_read_dir(CONTEXT *ctx)
mh.c:1297:static int maildir_open_mailbox(CONTEXT *ctx)
mh.c:1302:static int maildir_open_mailbox_append(CONTEXT *ctx, int flags)
mh.c:1348:static int mh_open_mailbox(CONTEXT *ctx)
mh.c:1353:static int mh_open_mailbox_append(CONTEXT *ctx, int flags)
mh.c:1384:static int mh_open_new_message(MESSAGE *msg, CONTEXT *dest, HEADER *hdr)
mh.c:1389:static int ch_compar(const void *a, const void *b)
mh.c:1394:void maildir_flags(char *dest, size_t destlen, HEADER *hdr)
mh.c:1419:static int maildir_mh_open_message(CONTEXT *ctx, MESSAGE *msg, int msgno, int is_maildir)
mh.c:1441:static int maildir_open_message(CONTEXT *ctx, MESSAGE *msg, int msgno)
mh.c:1446:static int mh_open_message(CONTEXT *ctx, MESSAGE *msg, int msgno)
mh.c:1451:static int mh_close_message(CONTEXT *ctx, MESSAGE *msg)
mh.c:1463:static int maildir_open_new_message(MESSAGE *msg, CONTEXT *dest, HEADER *hdr)
mh.c:1546:static int _maildir_commit_message(CONTEXT *ctx, MESSAGE *msg, HEADER *hdr)
mh.c:1623:static int maildir_commit_message(CONTEXT *ctx, MESSAGE *msg)
mh.c:1634:static int _mh_commit_message(CONTEXT *ctx, MESSAGE *msg, HEADER *hdr, short updseq)
mh.c:1709:static int mh_commit_message(CONTEXT *ctx, MESSAGE *msg)
mh.c:1720:static int mh_rewrite_message(CONTEXT *ctx, int msgno)
mh.c:1792:static int mh_sync_message(CONTEXT *ctx, int msgno)
mh.c:1804:static int maildir_sync_message(CONTEXT *ctx, int msgno)
mh.c:1865:int mh_sync_mailbox_message(CONTEXT *ctx, int msgno, header_cache_t *hc)
mh.c:1867:int mh_sync_mailbox_message(CONTEXT *ctx, int msgno)
mh.c:1947:static char *maildir_canon_filename(char *dest, const char *src, size_t l)
mh.c:1961:static void maildir_update_tables(CONTEXT *ctx, int *index_hint)
mh.c:1997:static int maildir_check_mailbox(CONTEXT *ctx, int *index_hint)
mh.c:2142:static int mh_check_mailbox(CONTEXT *ctx, int *index_hint)
mh.c:2244:static int mh_sync_mailbox(CONTEXT *ctx, int *index_hint)
mh.c:2319:void maildir_update_flags(CONTEXT *ctx, HEADER *o, HEADER *n)
mh.c:2361:static FILE *_maildir_open_find_message(const char *folder, const char *unique,
mh.c:2448:int maildir_check_empty(const char *path)
mh.c:2488:int mh_check_empty(const char *path)
mh.c:2509:bool mx_is_maildir(const char *path)
mh.c:2520:bool mx_is_mh(const char *path)
mutt_idna.c:24:static bool check_idn(char *domain)
mutt_idna.c:42:static int mbox_to_udomain(const char *mbx, char **user, char **domain)
mutt_idna.c:58:static int addr_is_local(ADDRESS *a)
mutt_idna.c:63:static int addr_is_intl(ADDRESS *a)
mutt_idna.c:68:static void set_local_mailbox(ADDRESS *a, char *local_mailbox)
mutt_idna.c:76:static void set_intl_mailbox(ADDRESS *a, char *intl_mailbox)
mutt_idna.c:84:static char *intl_to_local(char *orig_user, char *orig_domain, int flags)
mutt_idna.c:188:static char *local_to_intl(char *user, char *domain)
mutt_idna.c:226:int mutt_addrlist_to_intl(ADDRESS *a, char **err)
mutt_idna.c:258:int mutt_addrlist_to_local(ADDRESS *a)
mutt_idna.c:280:const char *mutt_addr_for_display(ADDRESS *a)
mutt_idna.c:303:void mutt_env_to_local(ENVELOPE *e)
mutt_idna.c:328:int mutt_env_to_intl(ENVELOPE *env, char **tag, char **err)
muttlib.c:75:void mutt_adv_mktemp(char *s, size_t l)
muttlib.c:103:int mutt_copy_body(FILE *fp, BODY **tgt, BODY *src)
muttlib.c:176:void mutt_free_body(BODY **p)
muttlib.c:220:void mutt_free_parameter(PARAMETER **p)
muttlib.c:279:void mutt_push_list(LIST **head, const char *data)
muttlib.c:288:bool mutt_pop_list(LIST **head)
muttlib.c:299:const char *mutt_front_list(LIST *head)
muttlib.c:306:int mutt_remove_from_rx_list(RX_LIST **l, const char *str)
muttlib.c:342:void mutt_free_list(LIST **list)
muttlib.c:377:void mutt_free_header(HEADER **h)
muttlib.c:398:bool mutt_matches_list(const char *s, LIST *t)
muttlib.c:409:int mutt_matches_ignore(const char *s)
muttlib.c:414:char *mutt_expand_path(char *s, size_t slen)
muttlib.c:419:char *_mutt_expand_path(char *s, size_t slen, int rx)
muttlib.c:598:char *mutt_gecos_name(char *dest, size_t destlen, struct passwd *pw)
muttlib.c:638:char *mutt_get_parameter(const char *s, PARAMETER *p)
muttlib.c:647:void mutt_set_parameter(const char *attribute, const char *value, PARAMETER **p)
muttlib.c:673:void mutt_delete_parameter(const char *attribute, PARAMETER **p)
muttlib.c:690:bool mutt_needs_mailcap(BODY *m)
muttlib.c:713:bool mutt_is_text_part(BODY *b)
muttlib.c:739:void mutt_free_envelope(ENVELOPE **p)
muttlib.c:777:void mutt_merge_envelopes(ENVELOPE *base, ENVELOPE **extra)
muttlib.c:834:static void mutt_randbuf(void *out, size_t len)
muttlib.c:872:void mutt_rand_base32(void *out, size_t len)
muttlib.c:882:uint32_t mutt_rand32(void)
muttlib.c:890:uint64_t mutt_rand64(void)
muttlib.c:899:void _mutt_mktemp(char *s, size_t slen, const char *prefix, const char *suffix,
muttlib.c:915:void mutt_free_alias(ALIAS **p)
muttlib.c:931:void mutt_pretty_mailbox(char *s, size_t buflen)
muttlib.c:1002:void mutt_pretty_size(char *s, size_t len, LOFF_T n)
muttlib.c:1022:void mutt_expand_file_fmt(char *dest, size_t destlen, const char *fmt, const char *src)
muttlib.c:1030:void mutt_expand_fmt(char *dest, size_t destlen, const char *fmt, const char *src)
muttlib.c:1080:int mutt_check_overwrite(const char *attname, const char *path, char *fname,
muttlib.c:1151:void mutt_save_path(char *d, size_t dsize, ADDRESS *a)
muttlib.c:1169:void mutt_safe_path(char *s, size_t l, ADDRESS *a)
muttlib.c:1181:char *mutt_apply_replace(char *dbuf, size_t dlen, char *sbuf, REPLACE_LIST *rlist)
muttlib.c:1273:void mutt_FormatString(char *dest,     /* output buffer */
muttlib.c:1798:int mutt_save_confirm(const char *s, struct stat *st)
muttlib.c:1870:void state_prefix_putc(char c, STATE *s)
muttlib.c:1885:int state_printf(STATE *s, const char *fmt, ...)
muttlib.c:1897:void state_mark_attach(STATE *s)
muttlib.c:1905:void state_attach_puts(const char *t, STATE *s)
muttlib.c:1921:static int state_putwc(wchar_t wc, STATE *s)
muttlib.c:1933:int state_putws(const wchar_t *ws, STATE *s)
muttlib.c:1946:void mutt_sleep(short s)
muttlib.c:1955:time_t mutt_decrease_mtime(const char *f, struct stat *st)
muttlib.c:1980:void mutt_set_mtime(const char *from, const char *to)
muttlib.c:1995:void mutt_touch_atime(int f)
muttlib.c:2003:const char *mutt_make_version(void)
muttlib.c:2021:void mutt_free_regexp(REGEXP **pp)
muttlib.c:2029:void mutt_free_rx_list(RX_LIST **list)
muttlib.c:2044:void mutt_free_replace_list(REPLACE_LIST **list)
muttlib.c:2060:bool mutt_match_rx_list(const char *s, RX_LIST *l)
muttlib.c:2084:bool mutt_match_spam_list(const char *s, REPLACE_LIST *l, char *text, int textsize)
muttlib.c:2156:void mutt_encode_path(char *dest, size_t dlen, const char *src)
muttlib.c:2170:int mutt_set_xdg_path(const XDGType type, char *buf, size_t bufsize)
muttlib.c:2222:void mutt_get_parent_path(char *output, char *path, size_t olen)
mutt_lua.c:31:static int _handle_panic(lua_State *l)
mutt_lua.c:38:static int _handle_error(lua_State *l)
mutt_lua.c:46:static int _lua_mutt_call(lua_State *l)
mutt_lua.c:104:static int _lua_mutt_set(lua_State *l)
mutt_lua.c:190:static int _lua_mutt_get(lua_State *l)
mutt_lua.c:259:static int _lua_mutt_enter(lua_State *l)
mutt_lua.c:291:static int _lua_mutt_message(lua_State *l)
mutt_lua.c:300:static int _lua_mutt_error(lua_State *l)
mutt_lua.c:309:static void _lua_expose_command(void *p, const struct command_t *cmd)
mutt_lua.c:330:static int luaopen_mutt_decl(lua_State *l)
mutt_lua.c:344:static void luaopen_mutt(lua_State *l)
mutt_lua.c:351:static bool _lua_init(lua_State **l)
mutt_lua.c:378:int mutt_lua_parse(BUFFER *tmp, BUFFER *s, unsigned long data, BUFFER *err)
mutt_lua.c:395:int mutt_lua_source_file(BUFFER *tmp, BUFFER *s, unsigned long data, BUFFER *err)
mutt_notmuch.c:168:static void debug_print_filenames(notmuch_message_t *msg)
mutt_notmuch.c:187:static void debug_print_tags(notmuch_message_t *msg)
mutt_notmuch.c:205:static void url_free_tags(struct uri_tag *tags)
mutt_notmuch.c:233:static bool url_parse_query(const char *url, char **filename, struct uri_tag **tags)
mutt_notmuch.c:302:static void free_tag_list(struct nm_hdrtag **tag_list)
mutt_notmuch.c:317:static void free_hdrdata(struct nm_hdrdata *data)
mutt_notmuch.c:332:static void free_ctxdata(struct nm_ctxdata *data)
mutt_notmuch.c:353:static struct nm_ctxdata *new_ctxdata(char *uri)
mutt_notmuch.c:375:static int init_context(CONTEXT *ctx)
mutt_notmuch.c:390:static char *header_get_id(HEADER *h)
mutt_notmuch.c:395:static char *header_get_fullpath(HEADER *h, char *buf, size_t bufsz)
mutt_notmuch.c:401:static struct nm_ctxdata *get_ctxdata(CONTEXT *ctx)
mutt_notmuch.c:409:static int string_to_query_type(const char *str)
mutt_notmuch.c:437:static bool query_window_check_timebase(const char *timebase)
mutt_notmuch.c:455:static void query_window_reset(void)
mutt_notmuch.c:500:static bool windowed_query_from_query(const char *query, char *buf, size_t bufsz)
mutt_notmuch.c:556:static char *get_query_string(struct nm_ctxdata *data, int window)
mutt_notmuch.c:611:static int get_limit(struct nm_ctxdata *data)
mutt_notmuch.c:616:static int get_query_type(struct nm_ctxdata *data)
mutt_notmuch.c:621:static const char *get_db_filename(struct nm_ctxdata *data)
mutt_notmuch.c:640:static notmuch_database_t *do_database_open(const char *filename, int writable, int verbose)
mutt_notmuch.c:678:static notmuch_database_t *get_db(struct nm_ctxdata *data, int writable)
mutt_notmuch.c:692:static int release_db(struct nm_ctxdata *data)
mutt_notmuch.c:710:static int db_trans_begin(struct nm_ctxdata *data)
mutt_notmuch.c:727:static int db_trans_end(struct nm_ctxdata *data)
mutt_notmuch.c:743:static int is_longrun(struct nm_ctxdata *data)
mutt_notmuch.c:748:static int get_database_mtime(struct nm_ctxdata *data, time_t *mtime)
mutt_notmuch.c:768:static void apply_exclude_tags(notmuch_query_t *query)
mutt_notmuch.c:800:static notmuch_query_t *get_query(struct nm_ctxdata *data, int writable)
mutt_notmuch.c:829:static void append_str_item(char **str, const char *item, int sep)
mutt_notmuch.c:842:static int update_header_tags(HEADER *h, notmuch_message_t *msg)
mutt_notmuch.c:914:static int update_message_path(HEADER *h, const char *path)
mutt_notmuch.c:946:static char *get_folder_from_path(const char *path)
mutt_notmuch.c:964:static void deinit_header(HEADER *h)
mutt_notmuch.c:973:static char *nm2mutt_message_id(const char *id)
mutt_notmuch.c:987:static int init_header(HEADER *h, const char *path, notmuch_message_t *msg)
mutt_notmuch.c:1019:static const char *get_message_last_filename(notmuch_message_t *msg)
mutt_notmuch.c:1033:static void progress_reset(CONTEXT *ctx)
mutt_notmuch.c:1051:static void progress_update(CONTEXT *ctx, notmuch_query_t *q)
mutt_notmuch.c:1079:static HEADER *get_mutt_header(CONTEXT *ctx, notmuch_message_t *msg)
mutt_notmuch.c:1110:static void append_message(CONTEXT *ctx, notmuch_query_t *q, notmuch_message_t *msg, int dedup)
mutt_notmuch.c:1197:static void append_replies(CONTEXT *ctx, notmuch_query_t *q, notmuch_message_t *top, int dedup)
mutt_notmuch.c:1212:static void append_thread(CONTEXT *ctx, notmuch_query_t *q, notmuch_thread_t *thread, int dedup)
mutt_notmuch.c:1226:static bool read_mesgs_query(CONTEXT *ctx, notmuch_query_t *q, int dedup)
mutt_notmuch.c:1259:static bool read_threads_query(CONTEXT *ctx, notmuch_query_t *q, int dedup, int limit)
mutt_notmuch.c:1289:static notmuch_message_t *get_nm_message(notmuch_database_t *db, HEADER *hdr)
mutt_notmuch.c:1302:static bool nm_message_has_tag(notmuch_message_t *msg, char *tag)
mutt_notmuch.c:1319:static int update_tags(notmuch_message_t *msg, const char *tags)
mutt_notmuch.c:1376:static int update_header_flags(CONTEXT *ctx, HEADER *hdr, const char *tags)
mutt_notmuch.c:1428:static int rename_maildir_filename(const char *old, char *newpath, size_t newsz, HEADER *h)
mutt_notmuch.c:1475:static int remove_filename(struct nm_ctxdata *data, const char *path)
mutt_notmuch.c:1529:static int rename_filename(struct nm_ctxdata *data, const char *old,
mutt_notmuch.c:1612:static unsigned count_query(notmuch_database_t *db, const char *qstr)
mutt_notmuch.c:1633:char *nm_header_get_folder(HEADER *h)
mutt_notmuch.c:1638:char *nm_header_get_tags(HEADER *h)
mutt_notmuch.c:1643:char *nm_header_get_tags_transformed(HEADER *h)
mutt_notmuch.c:1648:char *nm_header_get_tag_transformed(char *tag, HEADER *h)
mutt_notmuch.c:1664:void nm_longrun_init(CONTEXT *ctx, int writable)
mutt_notmuch.c:1675:void nm_longrun_done(CONTEXT *ctx)
mutt_notmuch.c:1683:void nm_debug_check(CONTEXT *ctx)
mutt_notmuch.c:1696:int nm_read_entire_thread(CONTEXT *ctx, HEADER *h)
mutt_notmuch.c:1749:char *nm_uri_from_query(CONTEXT *ctx, char *buf, size_t bufsz)
mutt_notmuch.c:1788:bool nm_normalize_uri(char *new_uri, const char *orig_uri, size_t new_uri_sz)
mutt_notmuch.c:1842:void nm_query_window_forward(void)
mutt_notmuch.c:1858:void nm_query_window_backward(void)
mutt_notmuch.c:1864:int nm_modify_message_tags(CONTEXT *ctx, HEADER *hdr, char *buf)
mutt_notmuch.c:1895:int nm_update_filename(CONTEXT *ctx, const char *old, const char *new, HEADER *h)
mutt_notmuch.c:1918:int nm_nonctx_get_count(char *path, int *all, int *new)
mutt_notmuch.c:2000:char *nm_get_description(CONTEXT *ctx)
mutt_notmuch.c:2011:int nm_description_to_path(const char *desc, char *buf, size_t bufsz)
mutt_notmuch.c:2029:int nm_record_message(CONTEXT *ctx, char *path, HEADER *h)
mutt_notmuch.c:2076:int nm_get_all_tags(CONTEXT *ctx, char **tag_list, int *tag_count)
mutt_notmuch.c:2119:static int nm_open_mailbox(CONTEXT *ctx)
mutt_notmuch.c:2166:static int nm_close_mailbox(CONTEXT *ctx)
mutt_notmuch.c:2189:static int nm_check_mailbox(CONTEXT *ctx, int *index_hint)
mutt_notmuch.c:2303:static int nm_sync_mailbox(CONTEXT *ctx, int *index_hint)
mutt_notmuch.c:2383:static int nm_open_message(CONTEXT *ctx, MESSAGE *msg, int msgno)
mutt_notmuch.c:2403:static int nm_close_message(CONTEXT *ctx, MESSAGE *msg)
mutt_notmuch.c:2411:static int nm_commit_message(CONTEXT *ctx, MESSAGE *msg)
mutt_sasl.c:31:static int getnameinfo_err(int ret)
mutt_sasl.c:91:static int iptostring(const struct sockaddr *addr, socklen_t addrlen, char *out, unsigned outlen)
mutt_sasl.c:117:static int mutt_sasl_cb_log(void *context, int priority, const char *message)
mutt_sasl.c:126:static int mutt_sasl_start(void)
mutt_sasl.c:159:static int mutt_sasl_cb_authname(void *context, int id, const char **result, unsigned *len)
mutt_sasl.c:196:static int mutt_sasl_cb_pass(sasl_conn_t *conn, void *context, int id, sasl_secret_t **psecret)
mutt_sasl.c:220:static sasl_callback_t *mutt_sasl_get_callbacks(ACCOUNT *account)
mutt_sasl.c:256:int mutt_sasl_client_new(CONNECTION *conn, sasl_conn_t **saslconn)
mutt_sasl.c:358:int mutt_sasl_interact(sasl_interact_t *interaction)
mutt_sasl.c:387:static int mutt_sasl_conn_open(CONNECTION *conn)
mutt_sasl.c:402:static int mutt_sasl_conn_close(CONNECTION *conn)
mutt_sasl.c:427:static int mutt_sasl_conn_read(CONNECTION *conn, char *buf, size_t len)
mutt_sasl.c:488:static int mutt_sasl_conn_write(CONNECTION *conn, const char *buf, size_t len)
mutt_sasl.c:535:static int mutt_sasl_conn_poll(CONNECTION *conn)
mutt_sasl.c:562:void mutt_sasl_setup_conn(CONNECTION *conn, sasl_conn_t *saslconn)
mutt_sasl.c:601:void mutt_sasl_done(void)
mutt_sasl_plain.c:22:size_t mutt_sasl_plain_msg(char *buf, size_t buflen, const char *cmd,
mutt_socket.c:47:static int socket_preconnect(void)
mutt_socket.c:71:int mutt_socket_open(CONNECTION *conn)
mutt_socket.c:86:int mutt_socket_close(CONNECTION *conn)
mutt_socket.c:101:int mutt_socket_write_d(CONNECTION *conn, const char *buf, int len, int dbg)
mutt_socket.c:141:int mutt_socket_poll(CONNECTION *conn)
mutt_socket.c:153:int mutt_socket_readchar(CONNECTION *conn, char *c)
mutt_socket.c:182:int mutt_socket_readln_d(char *buf, size_t buflen, CONNECTION *conn, int dbg)
mutt_socket.c:217:void mutt_socket_free(CONNECTION *conn)
mutt_socket.c:246:static CONNECTION *socket_new_conn(void)
mutt_socket.c:317:int raw_socket_close(CONNECTION *conn)
mutt_socket.c:322:int raw_socket_read(CONNECTION *conn, char *buf, size_t len)
mutt_socket.c:346:int raw_socket_write(CONNECTION *conn, const char *buf, size_t count)
mutt_socket.c:370:int raw_socket_poll(CONNECTION *conn)
mutt_socket.c:385:static int socket_connect(int fd, struct sockaddr *sa)
mutt_socket.c:423:int raw_socket_open(CONNECTION *conn)
mutt_ssl.c:77:static int ssl_load_certificates(SSL_CTX *ctx)
mutt_ssl.c:122:static int ssl_set_verify_partial(SSL_CTX *ctx)
mutt_ssl.c:152:static int add_entropy(const char *file)
mutt_ssl.c:187:static void ssl_err(sslsockdata *data, int err)
mutt_ssl.c:244:static void ssl_dprint_err_stack(void)
mutt_ssl.c:267:static int ssl_passwd_cb(char *buf, int size, int rwflag, void *userdata)
mutt_ssl.c:283:static int ssl_socket_open_err(CONNECTION *conn)
mutt_ssl.c:290:static int ssl_socket_close(CONNECTION *conn)
mutt_ssl.c:308:static char *x509_get_part(X509_NAME *name, int nid)
mutt_ssl.c:318:static void x509_fingerprint(char *s, int l, X509 *cert, const EVP_MD *(*hashfunc)(void) )
mutt_ssl.c:339:static char *asn1time_to_string(ASN1_UTCTIME *tm)
mutt_ssl.c:357:static bool compare_certificates(X509 *cert, X509 *peercert,
mutt_ssl.c:378:static bool check_certificate_expiration(X509 *peercert, bool silent)
mutt_ssl.c:408:static bool hostname_match(const char *hostname, const char *certname)
mutt_ssl.c:454:static int ssl_init(void)
mutt_ssl.c:495:static int ssl_socket_read(CONNECTION *conn, char *buf, size_t len)
mutt_ssl.c:514:static int ssl_socket_write(CONNECTION *conn, const char *buf, size_t len)
mutt_ssl.c:532:static void ssl_get_client_cert(sslsockdata *ssldata, CONNECTION *conn)
mutt_ssl.c:547:static int tls_close(CONNECTION *conn)
mutt_ssl.c:559:static bool check_certificate_cache(X509 *peercert)
mutt_ssl.c:583:static int check_certificate_file(X509 *peercert)
mutt_ssl.c:622:static int check_host(X509 *x509cert, const char *hostname, char *err, size_t errlen)
mutt_ssl.c:724:static int check_certificate_by_digest(X509 *peercert)
mutt_ssl.c:729:static int ssl_cache_trusted_cert(X509 *c)
mutt_ssl.c:737:static int interactive_check_cert(X509 *cert, int idx, int len, SSL *ssl, int allow_always)
mutt_ssl.c:896:static int ssl_verify_callback(int preverify_ok, X509_STORE_CTX *ctx)
mutt_ssl.c:1018:static int ssl_negotiate(CONNECTION *conn, sslsockdata *ssldata)
mutt_ssl.c:1084:static int ssl_socket_open(CONNECTION *conn)
mutt_ssl.c:1179:int mutt_ssl_starttls(CONNECTION *conn)
mutt_ssl.c:1292:int mutt_ssl_socket_setup(CONNECTION *conn)
mutt_ssl_gnutls.c:81:static int tls_init(void)
mutt_ssl_gnutls.c:101:static int tls_socket_read(CONNECTION *conn, char *buf, size_t len)
mutt_ssl_gnutls.c:127:static int tls_socket_write(CONNECTION *conn, const char *buf, size_t len)
mutt_ssl_gnutls.c:159:static int tls_socket_close(CONNECTION *conn)
mutt_ssl_gnutls.c:182:static int tls_starttls_close(CONNECTION *conn)
mutt_ssl_gnutls.c:195:static gnutls_certificate_status_t tls_verify_peers(gnutls_session_t tlsstate)
mutt_ssl_gnutls.c:228:static void tls_fingerprint(gnutls_digest_algorithm_t algo, char *s, int l,
mutt_ssl_gnutls.c:253:static int tls_check_stored_hostname(const gnutls_datum_t *cert, const char *hostname)
mutt_ssl_gnutls.c:304:static int tls_compare_certificates(const gnutls_datum_t *peercert)
mutt_ssl_gnutls.c:373:static int tls_check_preauth(const gnutls_datum_t *certdata,
mutt_ssl_gnutls.c:490:static char *tls_make_date(time_t t, char *s, size_t len)
mutt_ssl_gnutls.c:506:static int tls_check_one_certificate(const gnutls_datum_t *certdata,
mutt_ssl_gnutls.c:778:static int tls_check_certificate(CONNECTION *conn)
mutt_ssl_gnutls.c:856:static void tls_get_client_cert(CONNECTION *conn)
mutt_ssl_gnutls.c:912:static int tls_set_priority(tlssockdata *data)
mutt_ssl_gnutls.c:974:static int tls_set_priority(tlssockdata *data)
mutt_ssl_gnutls.c:1011:static int tls_negotiate(CONNECTION *conn)
mutt_ssl_gnutls.c:1130:static int tls_socket_open(CONNECTION *conn)
mutt_ssl_gnutls.c:1144:int mutt_ssl_socket_setup(CONNECTION *conn)
mutt_ssl_gnutls.c:1158:int mutt_ssl_starttls(CONNECTION *conn)
mutt_tunnel.c:38:static int tunnel_socket_open(CONNECTION *conn)
mutt_tunnel.c:113:static int tunnel_socket_close(CONNECTION *conn)
mutt_tunnel.c:132:static int tunnel_socket_read(CONNECTION *conn, char *buf, size_t len)
mutt_tunnel.c:147:static int tunnel_socket_write(CONNECTION *conn, const char *buf, size_t len)
mutt_tunnel.c:162:static int tunnel_socket_poll(CONNECTION *conn)
mutt_tunnel.c:177:int mutt_tunnel_socket_setup(CONNECTION *conn)
mx.c:62:struct mx_ops *mx_get_ops(int magic)
mx.c:109:static int invoke_dotlock(const char *path, int dummy, int flags, int retry)
mx.c:134:static int dotlock_file(const char *path, int fd, int retry)
mx.c:166:static int undotlock_file(const char *path, int fd)
mx.c:178:int mx_lock_file(const char *path, int fd, int excl, int dot, int timeout)
mx.c:282:int mx_unlock_file(const char *path, int fd, int dot)
mx.c:305:static void mx_unlink_empty(const char *path)
mx.c:342:bool mx_is_imap(const char *p)
mx.c:362:bool mx_is_pop(const char *p)
mx.c:378:bool mx_is_nntp(const char *p)
mx.c:394:bool mx_is_notmuch(const char *p)
mx.c:409:int mx_get_magic(const char *path)
mx.c:516:int mx_set_magic(const char *s)
mx.c:535:int mx_access(const char *path, int flags)
mx.c:545:static int mx_open_mailbox_append(CONTEXT *ctx, int flags)
mx.c:696:void mx_fastclose_mailbox(CONTEXT *ctx)
mx.c:740:static int sync_mailbox(CONTEXT *ctx, int *index_hint)
mx.c:752:static int trash_append(CONTEXT *ctx)
mx.c:818:int mx_close_mailbox(CONTEXT *ctx, int *index_hint)
mx.c:1064:void mx_update_tables(CONTEXT *ctx, int committing)
mx.c:1154:int mx_sync_mailbox(CONTEXT *ctx, int *index_hint)
mx.c:1338:int mx_check_mailbox(CONTEXT *ctx, int *index_hint)
mx.c:1369:int mx_commit_message(MESSAGE *msg, CONTEXT *ctx)
mx.c:1385:int mx_close_message(CONTEXT *ctx, MESSAGE **msg)
mx.c:1406:void mx_alloc_memory(CONTEXT *ctx)
mx.c:1438:void mx_update_context(CONTEXT *ctx, int new_messages)
mx.c:1509:int mx_check_empty(const char *path)
newsrc.c:45:static NNTP_DATA *nntp_data_find(NNTP_SERVER *nserv, const char *group)
newsrc.c:75:void nntp_acache_free(NNTP_DATA *nntp_data)
newsrc.c:90:void nntp_data_free(void *data)
newsrc.c:104:void nntp_newsrc_close(NNTP_SERVER *nserv)
newsrc.c:115:void nntp_group_unread_stat(NNTP_DATA *nntp_data)
newsrc.c:142:int nntp_newsrc_parse(NNTP_SERVER *nserv)
newsrc.c:276:void nntp_newsrc_gen_entries(CONTEXT *ctx)
newsrc.c:358:static int update_file(char *filename, char *buf)
newsrc.c:405:int nntp_newsrc_update(NNTP_SERVER *nserv)
newsrc.c:482:static void cache_expand(char *dst, size_t dstlen, ACCOUNT *acct, char *src)
newsrc.c:509:void nntp_expand_path(char *line, size_t len, ACCOUNT *acct)
newsrc.c:520:int nntp_add_group(char *line, void *data)
newsrc.c:551:static int active_get_cache(NNTP_SERVER *nserv)
newsrc.c:581:int nntp_active_save_cache(NNTP_SERVER *nserv)
newsrc.c:625:static int nntp_hcache_namer(const char *path, char *dest, size_t destlen)
newsrc.c:631:header_cache_t *nntp_hcache_open(NNTP_DATA *nntp_data)
newsrc.c:648:void nntp_hcache_update(NNTP_DATA *nntp_data, header_cache_t *hc)
newsrc.c:693:static int nntp_bcache_delete(const char *id, body_cache_t *bcache, void *data)
newsrc.c:710:void nntp_bcache_update(NNTP_DATA *nntp_data)
newsrc.c:716:void nntp_delete_group_cache(NNTP_DATA *nntp_data)
newsrc.c:742:void nntp_clear_cache(NNTP_SERVER *nserv)
newsrc.c:814:const char *nntp_format_str(char *dest, size_t destlen, size_t col, int cols, char op,
newsrc.c:1068:void nntp_article_status(CONTEXT *ctx, HEADER *hdr, char *group, anum_t anum)
newsrc.c:1204:void nntp_buffy(char *buf, size_t len)
nntp.c:53:static int nntp_connect_error(NNTP_SERVER *nserv)
nntp.c:65:static int nntp_capabilities(NNTP_SERVER *nserv)
nntp.c:170:static int nntp_attempt_features(NNTP_SERVER *nserv)
nntp.c:294:static int nntp_auth(NNTP_SERVER *nserv)
nntp.c:583:int nntp_open_connection(NNTP_SERVER *nserv)
nntp.c:736:static int nntp_query(NNTP_DATA *nntp_data, char *line, size_t linelen)
nntp.c:801:static int nntp_fetch_lines(NNTP_DATA *nntp_data, char *query, size_t qlen,
nntp.c:876:static int fetch_description(char *line, void *data)
nntp.c:905:static int get_description(NNTP_DATA *nntp_data, char *wildmat, char *msg)
nntp.c:934:static void nntp_parse_xref(CONTEXT *ctx, HEADER *hdr)
nntp.c:970:static int fetch_tempfile(char *line, void *data)
nntp.c:995:static int fetch_numbers(char *line, void *data)
nntp.c:1011:static int parse_overview_line(char *line, void *data)
nntp.c:1162:static int nntp_fetch_headers(CONTEXT *ctx, void *hc, anum_t first, anum_t last, int restore)
nntp.c:1393:static int nntp_open_mailbox(CONTEXT *ctx)
nntp.c:1528:static int nntp_fetch_message(CONTEXT *ctx, MESSAGE *msg, int msgno)
nntp.c:1650:static int nntp_close_message(CONTEXT *ctx, MESSAGE *msg)
nntp.c:1656:int nntp_post(const char *msg)
nntp.c:1727:static int nntp_group_poll(NNTP_DATA *nntp_data, int update_stat)
nntp.c:1770:static int nntp_check_mailbox(CONTEXT *ctx, int *index_hint)
nntp.c:1981:static int nntp_sync_mailbox(CONTEXT *ctx, int *index_hint)
nntp.c:2040:static int nntp_fastclose_mailbox(CONTEXT *ctx)
nntp.c:2058:static int nntp_date(NNTP_SERVER *nserv, time_t *now)
nntp.c:2090:int nntp_active_fetch(NNTP_SERVER *nserv)
nntp.c:2142:int nntp_check_new_groups(NNTP_SERVER *nserv)
nntp.c:2244:int nntp_check_msgid(CONTEXT *ctx, const char *msgid)
nntp.c:2319:static int fetch_children(char *line, void *data)
nntp.c:2340:int nntp_check_children(CONTEXT *ctx, const char *msgid)
pager.c:150:static int check_sig(const char *s, struct line_t *info, int n)
pager.c:181:static void resolve_color(struct line_t *lineInfo, int n, int cnt, int flags,
pager.c:314:static void append_line(struct line_t *lineInfo, int n, int cnt)
pager.c:332:static void new_class_color(struct q_class_t *class, int *q_level)
pager.c:338:static void shift_class_colors(struct q_class_t *QuoteList,
pager.c:375:static void cleanup_quote(struct q_class_t **QuoteList)
pager.c:393:static struct q_class_t *classify_quote(struct q_class_t **QuoteList, const char *qptr,
pager.c:705:static int check_attachment_marker(char *p)
pager.c:714:static void resolve_types(char *buf, char *raw, struct line_t *lineInfo, int n,
pager.c:966:static int is_ansi(unsigned char *buf)
pager.c:973:static int grok_ansi(unsigned char *buf, int pos, ansi_attr *a)
pager.c:1059:static int trim_incomplete_mbyte(unsigned char *buf, size_t len)
pager.c:1082:static int fill_buffer(FILE *f, LOFF_T *last_pos, LOFF_T offset, unsigned char **buf,
pager.c:1151:static int format_line(struct line_t **lineInfo, int n, unsigned char *buf,
pager.c:1345:static int display_line(FILE *f, LOFF_T *last_pos, struct line_t **lineInfo,
pager.c:1586:static int up_n_lines(int nlines, struct line_t *info, int cur, int hiding)
pager.c:1619:void mutt_clear_pager_position(void)
pager.c:1661:static void pager_menu_redraw(MUTTMENU *pager_menu)
pager.c:1939:int mutt_pager(const char *banner, const char *fname, int flags, pager_t *extra)
parse.c:37:char *mutt_read_rfc822_line(FILE *f, char *line, size_t *linelen)
parse.c:93:static LIST *parse_references(char *s, int in_reply_to)
parse.c:113:int mutt_check_encoding(const char *c)
parse.c:135:static PARAMETER *parse_parameters(const char *s)
parse.c:258:int mutt_check_mime_type(const char *s)
parse.c:288:void mutt_parse_content_type(char *s, BODY *ct)
parse.c:374:static void parse_content_disposition(const char *s, BODY *ct)
parse.c:478:void mutt_parse_part(FILE *fp, BODY *b)
parse.c:660:static const char *uncomment_timezone(char *buf, size_t buflen, const char *tz)
parse.c:742:time_t mutt_parse_date(const char *s, HEADER *h)
parse.c:887:char *mutt_extract_message_id(const char *s, const char **saveptr)
parse.c:943:void mutt_parse_mime_message(CONTEXT *ctx, HEADER *cur)
parse.c:969:int mutt_parse_rfc822_line(ENVELOPE *e, HEADER *hdr, char *line, char *p,
parse.c:1541:static bool count_body_parts_check(LIST **checklist, BODY *b, bool dflt)
parse.c:1582:static int count_body_parts(BODY *body, int flags)
parse.c:1675:int mutt_count_body_parts(CONTEXT *ctx, HEADER *hdr)
pattern.c:50:static bool eat_regexp(pattern_t *pat, BUFFER *s, BUFFER *err)
pattern.c:103:static const char *get_offset(struct tm *tm, const char *s, int sign)
pattern.c:131:static const char *get_date(const char *s, struct tm *t, BUFFER *err)
pattern.c:251:static const char *parse_date_range(const char *pc, struct tm *min, struct tm *max,
pattern.c:332:static void adjust_date_range(struct tm *min, struct tm *max)
pattern.c:358:static bool eat_date(pattern_t *pat, BUFFER *s, BUFFER *err)
pattern.c:496:static bool eat_range(pattern_t *pat, BUFFER *s, BUFFER *err)
pattern.c:581:static int report_regerror(int regerr, regex_t *preg, BUFFER *err)
pattern.c:591:static bool is_context_available(BUFFER *s, regmatch_t pmatch[], int kind, BUFFER *err)
pattern.c:618:static int scan_range_num(BUFFER *s, regmatch_t pmatch[], int group, int kind)
pattern.c:644:static int scan_range_slot(BUFFER *s, regmatch_t pmatch[], int grp, int side, int kind)
pattern.c:675:static void order_range(pattern_t *pat)
pattern.c:686:static int eat_range_by_regexp(pattern_t *pat, BUFFER *s, int kind, BUFFER *err)
pattern.c:734:static bool eat_message_range(pattern_t *pat, BUFFER *s, BUFFER *err)
pattern.c:842:int mutt_which_case(const char *s)
pattern.c:863:static int patmatch(const pattern_t *pat, const char *buf)
pattern.c:873:static int msg_search(CONTEXT *ctx, pattern_t *pat, int msgno)
pattern.c:1028:static const struct pattern_flags *lookup_tag(char tag)
pattern.c:1038:static /* const */ char *find_matching_paren(/* const */ char *s)
pattern.c:1056:void mutt_pattern_free(pattern_t **pat)
pattern.c:1081:pattern_t *mutt_pattern_comp(/* const */ char *s, int flags, BUFFER *err)
pattern.c:1301:static bool perform_and(pattern_t *pat, pattern_exec_flag flags, CONTEXT *ctx,
pattern.c:1310:static int perform_or(struct pattern_t *pat, pattern_exec_flag flags,
pattern.c:1319:static int match_adrlist(pattern_t *pat, int match_personal, int n, ...)
pattern.c:1342:static bool match_reference(pattern_t *pat, LIST *refs)
pattern.c:1353:int mutt_is_list_recipient(int alladdr, ADDRESS *a1, ADDRESS *a2)
pattern.c:1369:int mutt_is_list_cc(int alladdr, ADDRESS *a1, ADDRESS *a2)
pattern.c:1380:static int match_user(int alladdr, ADDRESS *a1, ADDRESS *a2)
pattern.c:1391:static int match_threadcomplete(struct pattern_t *pat, pattern_exec_flag flags,
pattern.c:1421:static void set_pattern_cache_value(int *cache_entry, int value)
pattern.c:1428:static int get_pattern_cache_value(int cache_entry)
pattern.c:1433:static int is_pattern_cache_set(int cache_entry)
pattern.c:1443:int mutt_pattern_exec(struct pattern_t *pat, pattern_exec_flag flags,
pattern.c:1633:static void quote_simple(char *tmp, size_t len, const char *p)
pattern.c:1649:void mutt_check_simple(char *s, size_t len, const char *simple)
pattern.c:1708:static THREAD *top_of_thread(HEADER *h)
pattern.c:1731:bool mutt_limit_current_thread(HEADER *h)
pattern.c:1768:int mutt_pattern_func(int op, char *prompt)
pattern.c:1887:int mutt_search_command(int cur, int op)
pgp.c:59:void pgp_void_passphrase(void)
pgp.c:65:int pgp_valid_passphrase(void)
pgp.c:92:bool pgp_use_gpg_agent(void)
pgp.c:109:static pgp_key_t _pgp_parent(pgp_key_t k)
pgp.c:117:char *pgp_long_keyid(pgp_key_t k)
pgp.c:124:char *pgp_short_keyid(pgp_key_t k)
pgp.c:131:char *pgp_keyid(pgp_key_t k)
pgp.c:138:char *_pgp_keyid(pgp_key_t k)
pgp.c:146:static char *pgp_fingerprint(pgp_key_t k)
pgp.c:159:char *pgp_fpr_or_lkeyid(pgp_key_t k)
pgp.c:173:static int pgp_copy_checksig(FILE *fpin, FILE *fpout)
pgp.c:214:static int pgp_check_decryption_okay(FILE *fpin)
pgp.c:260:static void pgp_copy_clearsigned(FILE *fpin, STATE *s, char *charset)
pgp.c:310:int pgp_application_pgp_handler(BODY *m, STATE *s)
pgp.c:601:static int pgp_check_traditional_one_body(FILE *fp, BODY *b, int tagged_only)
pgp.c:661:int pgp_check_traditional(FILE *fp, BODY *b, int tagged_only)
pgp.c:682:int pgp_verify_one(BODY *sigbdy, STATE *s, const char *tempfile)
pgp.c:746:static void pgp_extract_keys_from_attachment(FILE *fp, BODY *top)
pgp.c:774:void pgp_extract_keys_from_attachment_list(FILE *fp, int tag, BODY *top)
pgp.c:797:static BODY *pgp_decrypt_part(BODY *a, STATE *s, FILE *fpout, BODY *p)
pgp.c:921:int pgp_decrypt_mime(FILE *fpin, FILE **fpout, BODY *b, BODY **cur)
pgp.c:1002:int pgp_encrypted_handler(BODY *a, STATE *s)
pgp.c:1197:char *pgp_find_keys(ADDRESS *adrlist, int oppenc_mode)
pgp.c:1611:int pgp_send_menu(HEADER *msg)
pgpewrap.c:14:static void print_usage(const char *progname)
pgpewrap.c:20:int main(int argc, char **argv)
pgpinvoke.c:52:static const char *_mutt_fmt_pgp_command(char *dest, size_t destlen, size_t col,
pgpinvoke.c:138:static void mutt_pgp_command(char *d, size_t dlen,
pgpinvoke.c:151:static pid_t pgp_invoke(FILE **pgpin, FILE **pgpout, FILE **pgperr, int pgpinfd,
pgpinvoke.c:184:pid_t pgp_invoke_decode(FILE **pgpin, FILE **pgpout, FILE **pgperr, int pgpinfd,
pgpinvoke.c:191:pid_t pgp_invoke_verify(FILE **pgpin, FILE **pgpout, FILE **pgperr, int pgpinfd,
pgpinvoke.c:198:pid_t pgp_invoke_decrypt(FILE **pgpin, FILE **pgpout, FILE **pgperr, int pgpinfd,
pgpinvoke.c:205:pid_t pgp_invoke_sign(FILE **pgpin, FILE **pgpout, FILE **pgperr, int pgpinfd,
pgpinvoke.c:213:pid_t pgp_invoke_encrypt(FILE **pgpin, FILE **pgpout, FILE **pgperr,
pgpinvoke.c:225:pid_t pgp_invoke_traditional(FILE **pgpin, FILE **pgpout, FILE **pgperr,
pgpinvoke.c:239:void pgp_invoke_import(const char *fname)
pgpinvoke.c:255:void pgp_invoke_getkeys(ADDRESS *addr)
pgpinvoke.c:299:pid_t pgp_invoke_export(FILE **pgpin, FILE **pgpout, FILE **pgperr, int pgpinfd,
pgpinvoke.c:306:pid_t pgp_invoke_verify_key(FILE **pgpin, FILE **pgpout, FILE **pgperr, int pgpinfd,
pgpinvoke.c:313:pid_t pgp_invoke_list_keys(FILE **pgpin, FILE **pgpout, FILE **pgperr, int pgpinfd,
pgpkey.c:47:static char *pgp_key_abilities(int flags)
pgpkey.c:70:static char pgp_flags(int flags)
pgpkey.c:84:static pgp_key_t pgp_principal_key(pgp_key_t key)
pgpkey.c:112:static const char *pgp_entry_fmt(char *dest, size_t destlen, size_t col, int cols,
pgpkey.c:269:static void pgp_entry(char *s, size_t l, MUTTMENU *menu, int num)
pgpkey.c:281:static int _pgp_compare_address(const void *a, const void *b)
pgpkey.c:295:static int pgp_compare_address(const void *a, const void *b)
pgpkey.c:302:static int _pgp_compare_keyid(const void *a, const void *b)
pgpkey.c:315:static int pgp_compare_keyid(const void *a, const void *b)
pgpkey.c:321:static int _pgp_compare_date(const void *a, const void *b)
pgpkey.c:332:static int pgp_compare_date(const void *a, const void *b)
pgpkey.c:338:static int _pgp_compare_trust(const void *a, const void *b)
pgpkey.c:360:static int pgp_compare_trust(const void *a, const void *b)
pgpkey.c:366:static bool pgp_key_is_valid(pgp_key_t k)
pgpkey.c:377:static bool pgp_id_is_strong(pgp_uid_t *uid)
pgpkey.c:385:static bool pgp_id_is_valid(pgp_uid_t *uid)
pgpkey.c:402:static int pgp_id_matches_addr(ADDRESS *addr, ADDRESS *u_addr, pgp_uid_t *uid)
pgpkey.c:423:static pgp_key_t pgp_select_key(pgp_key_t keys, ADDRESS *p, const char *s)
pgpkey.c:634:pgp_key_t pgp_ask_for_key(char *tag, char *whatfor, short abilities, pgp_ring_t keyring)
pgpkey.c:758:static LIST *pgp_add_string_to_hints(LIST *hints, const char *str)
pgpkey.c:776:static pgp_key_t *pgp_get_lastp(pgp_key_t p)
pgpkey.c:785:pgp_key_t pgp_getkeybyaddr(ADDRESS *a, short abilities, pgp_ring_t keyring, int oppenc_mode)
pgpkey.c:914:pgp_key_t pgp_getkeybystr(char *p, short abilities, pgp_ring_t keyring)
pgplib.c:30:const char *pgp_pkalgbytype(unsigned char type)
pgplib.c:51:bool pgp_canencrypt(unsigned char type)
pgplib.c:65:bool pgp_cansign(unsigned char type)
pgplib.c:86:short pgp_get_abilities(unsigned char type)
pgplib.c:91:static void pgp_free_sig(pgp_sig_t **sigp)
pgplib.c:107:static void pgp_free_uid(pgp_uid_t **upp)
pgplib.c:124:pgp_uid_t *pgp_copy_uids(pgp_uid_t *up, pgp_key_t parent)
pgplib.c:142:static void _pgp_free_key(pgp_key_t *kpp)
pgplib.c:158:pgp_key_t pgp_remove_key(pgp_key_t *klist, pgp_key_t key)
pgplib.c:186:void pgp_free_key(pgp_key_t *kpp)
pgpmicalg.c:43:static const char *pgp_hash_to_micalg(short id)
pgpmicalg.c:53:static void pgp_dearmor(FILE *in, FILE *out)
pgpmicalg.c:126:static short pgp_mic_from_packet(unsigned char *p, size_t len)
pgpmicalg.c:148:static short pgp_find_hash(const char *fname)
pgpmicalg.c:194:const char *pgp_micalg(const char *fname)
pgppacket.c:34:static int read_material(size_t material, size_t *used, FILE *fp)
pgppacket.c:62:unsigned char *pgp_read_packet(FILE *fp, size_t *len)
pgppacket.c:214:void pgp_release_packet(void)
pgppubring.c:66:static char gnupg_trustletter(int t)
pgppubring.c:80:static void print_userid(const char *id)
pgppubring.c:91:static void print_fingerprint(pgp_key_t p)
pgppubring.c:99:static void pgpring_dump_signatures(pgp_sig_t *sig)
pgppubring.c:111:static void pgpring_dump_keyblock(pgp_key_t p)
pgppubring.c:190:static bool pgpring_string_matches_hint(const char *s, const char *hints[], int nhints)
pgppubring.c:207:static void pgp_make_pgp2_fingerprint(unsigned char *buff, unsigned char *digest)
pgppubring.c:231:static char *binary_fingerprint_to_string(unsigned char *buff, size_t length)
pgppubring.c:248:static pgp_key_t pgp_parse_pgp2_key(unsigned char *buff, size_t l)
pgppubring.c:321:static void pgp_make_pgp3_fingerprint(unsigned char *buff, size_t l, unsigned char *digest)
pgppubring.c:343:static void skip_bignum(unsigned char *buff, size_t l, size_t j, size_t *toff, size_t n)
pgppubring.c:357:static pgp_key_t pgp_parse_pgp3_key(unsigned char *buff, size_t l)
pgppubring.c:413:static pgp_key_t pgp_parse_keyinfo(unsigned char *buff, size_t l)
pgppubring.c:430:static int pgp_parse_pgp2_sig(unsigned char *buff, size_t l, pgp_key_t p, pgp_sig_t *s)
pgppubring.c:470:static int pgp_parse_pgp3_sig(unsigned char *buff, size_t l, pgp_key_t p, pgp_sig_t *s)
pgppubring.c:609:static int pgp_parse_sig(unsigned char *buff, size_t l, pgp_key_t p, pgp_sig_t *sig)
pgppubring.c:628:static pgp_key_t pgp_parse_keyblock(FILE *fp)
pgppubring.c:777:static void pgpring_find_candidates(char *ringfile, const char *hints[], int nhints)
pgppubring.c:850:int main(int argc, char *const argv[])
pop_auth.c:33:static pop_auth_res_t pop_auth_sasl(POP_DATA *pop_data, const char *method)
pop_auth.c:183:void pop_apop_timestamp(POP_DATA *pop_data, char *buf)
pop_auth.c:197:static pop_auth_res_t pop_auth_apop(POP_DATA *pop_data, const char *method)
pop_auth.c:245:static pop_auth_res_t pop_auth_user(POP_DATA *pop_data, const char *method)
pop_auth.c:317:int pop_authenticate(POP_DATA *pop_data)
pop.c:39:static int fetch_message(char *line, void *file)
pop.c:58:static int pop_read_header(POP_DATA *pop_data, HEADER *h)
pop.c:135:static int fetch_uidl(char *line, void *data)
pop.c:174:static int msg_cache_check(const char *id, body_cache_t *bcache, void *data)
pop.c:203:static int pop_hcache_namer(const char *path, char *dest, size_t destlen)
pop.c:208:static header_cache_t *pop_hcache_open(POP_DATA *pop_data, const char *path)
pop.c:231:static int pop_fetch_headers(CONTEXT *ctx)
pop.c:394:static int pop_open_mailbox(CONTEXT *ctx)
pop.c:465:static void pop_clear_cache(POP_DATA *pop_data)
pop.c:485:static int pop_close_mailbox(CONTEXT *ctx)
pop.c:511:static int pop_fetch_message(CONTEXT *ctx, MESSAGE *msg, int msgno)
pop.c:658:static int pop_close_message(CONTEXT *ctx, MESSAGE *msg)
pop.c:664:static int pop_sync_mailbox(CONTEXT *ctx, int *index_hint)
pop.c:742:static int pop_check_mailbox(CONTEXT *ctx, int *index_hint)
pop.c:774:void pop_fetch_mail(void)
pop_lib.c:34:int pop_parse_path(const char *path, ACCOUNT *acct)
pop_lib.c:74:static void pop_error(POP_DATA *pop_data, char *msg)
pop_lib.c:94:static int fetch_capa(char *line, void *data)
pop_lib.c:122:static int fetch_auth(char *line, void *data)
pop_lib.c:147:static int pop_capabilities(POP_DATA *pop_data, int mode)
pop_lib.c:225:int pop_connect(POP_DATA *pop_data)
pop_lib.c:259:int pop_open_connection(POP_DATA *pop_data)
pop_lib.c:378:void pop_logout(CONTEXT *ctx)
pop_lib.c:416:int pop_query_d(POP_DATA *pop_data, char *buf, size_t buflen, char *msg)
pop_lib.c:461:int pop_fetch_data(POP_DATA *pop_data, char *query, progress_t *progressbar,
pop_lib.c:521:static int check_uidl(char *line, void *data)
pop_lib.c:549:int pop_reconnect(CONTEXT *ctx)
postpone.c:52:int mutt_num_postponed(int force)
postpone.c:147:void mutt_update_num_postponed(void)
postpone.c:152:static void post_entry(char *s, size_t slen, MUTTMENU *menu, int entry)
postpone.c:159:static HEADER *select_msg(void)
postpone.c:237:int mutt_get_postponed(CONTEXT *ctx, HEADER *hdr, HEADER **cur, char *fcc, size_t fcclen)
postpone.c:422:int mutt_parse_crypt_hdr(const char *p, int set_empty_signas, int crypt_app)
postpone.c:545:int mutt_prepare_template(FILE *fp, CONTEXT *ctx, HEADER *newhdr, HEADER *hdr, short resend)
query.c:53:static ADDRESS *result_to_addr(QUERY *r)
query.c:67:static void free_query(QUERY **query)
query.c:86:static QUERY *run_query(char *s, int quiet)
query.c:155:static int query_search(MUTTMENU *m, regex_t *re, int n)
query.c:180:static const char *query_format_str(char *dest, size_t destlen, size_t col, int cols,
query.c:233:static void query_entry(char *s, size_t slen, MUTTMENU *m, int num)
query.c:242:static int query_tag(MUTTMENU *menu, int n, int m)
query.c:251:static void query_menu(char *buf, size_t buflen, QUERY *results, int retbuf)
query.c:479:int mutt_query_complete(char *buf, size_t buflen)
query.c:511:void mutt_query_menu(char *buf, size_t buflen)
recvattach.c:54:void mutt_update_tree(ATTACHPTR **idx, short idxlen)
recvattach.c:159:const char *mutt_attach_fmt(char *dest, size_t destlen, size_t col, int cols,
recvattach.c:370:static void attach_entry(char *b, size_t blen, MUTTMENU *menu, int num)
recvattach.c:377:int mutt_tag_attach(MUTTMENU *menu, int n, int m)
recvattach.c:386:bool mutt_is_message_type(int type, const char *subtype)
recvattach.c:396:static void prepend_curdir(char *dst, size_t dstlen)
recvattach.c:414:static int query_save_attachment(FILE *fp, BODY *body, HEADER *hdr, char **directory)
recvattach.c:495:void mutt_save_attachment_list(FILE *fp, int tag, BODY *top, HEADER *hdr, MUTTMENU *menu)
recvattach.c:576:static void query_pipe_attachment(char *command, FILE *fp, BODY *body, int filter)
recvattach.c:612:static void pipe_attachment(FILE *fp, BODY *b, STATE *state)
recvattach.c:637:static void pipe_attachment_list(char *command, FILE *fp, int tag, BODY *top,
recvattach.c:656:void mutt_pipe_attachment_list(FILE *fp, int tag, BODY *top, int filter)
recvattach.c:690:static int can_print(BODY *top, int tag)
recvattach.c:720:static void print_attachment_list(FILE *fp, int tag, BODY *top, STATE *state)
recvattach.c:766:void mutt_print_attachment_list(FILE *fp, int tag, BODY *top)
recvattach.c:791:static void update_attach_index(BODY *cur, ATTACHPTR ***idxp, short *idxlen,
recvattach.c:811:int mutt_attach_display_loop(MUTTMENU *menu, int op, FILE *fp, HEADER *hdr, BODY *cur,
recvattach.c:880:static void attach_collapse(BODY *b, short collapse, short init, short just_one)
recvattach.c:897:void mutt_attach_init(BODY *b)
recvattach.c:920:void mutt_view_attachments(HEADER *hdr)
recvcmd.c:30:static bool check_msg(BODY *b, bool err)
recvcmd.c:41:static bool check_all_msg(ATTACHPTR **idx, short idxlen, BODY *cur, bool err)
recvcmd.c:63:static short check_can_decode(ATTACHPTR **idx, short idxlen, BODY *cur)
recvcmd.c:77:static short count_tagged(ATTACHPTR **idx, short idxlen)
recvcmd.c:92:static short count_tagged_children(ATTACHPTR **idx, short idxlen, short i)
recvcmd.c:110:void mutt_attach_bounce(FILE *fp, HEADER *hdr, ATTACHPTR **idx, short idxlen, BODY *cur)
recvcmd.c:234:void mutt_attach_resend(FILE *fp, HEADER *hdr, ATTACHPTR **idx, short idxlen, BODY *cur)
recvcmd.c:259:static HEADER *find_common_parent(ATTACHPTR **idx, short idxlen, short nattach)
recvcmd.c:288:static bool is_parent(short i, ATTACHPTR **idx, short idxlen, BODY *cur)
recvcmd.c:301:static HEADER *find_parent(ATTACHPTR **idx, short idxlen, BODY *cur, short nattach)
recvcmd.c:323:static void include_header(int quote, FILE *ifp, HEADER *hdr, FILE *ofp, char *_prefix)
recvcmd.c:348:static BODY **copy_problematic_attachments(FILE *fp, BODY **last, ATTACHPTR **idx,
recvcmd.c:369:static void attach_forward_bodies(FILE *fp, HEADER *hdr, ATTACHPTR **idx,
recvcmd.c:539:static void attach_forward_msgs(FILE *fp, HEADER *hdr, ATTACHPTR **idx,
recvcmd.c:644:void mutt_attach_forward(FILE *fp, HEADER *hdr, ATTACHPTR **idx, short idxlen,
recvcmd.c:679:static int attach_reply_envelope_defaults(ENVELOPE *env, ATTACHPTR **idx,
recvcmd.c:764:static void attach_include_reply(FILE *fp, FILE *tmpfp, HEADER *cur, int flags)
recvcmd.c:783:void mutt_attach_reply(FILE *fp, HEADER *hdr, ATTACHPTR **idx, short idxlen,
remailer.c:42:static int mix_get_caps(const char *capstr)
remailer.c:80:static void mix_add_entry(REMAILER ***type2_list, REMAILER *entry, size_t *slots, size_t *used)
remailer.c:93:static REMAILER *mix_new_remailer(void)
remailer.c:98:static void mix_free_remailer(REMAILER **r)
remailer.c:108:static REMAILER **mix_type2_list(size_t *l)
remailer.c:185:static void mix_free_type2_list(REMAILER ***ttlp)
remailer.c:202:static void mix_screen_coordinates(REMAILER **type2_list, struct coord **coordsp,
remailer.c:243:static void mix_redraw_ce(REMAILER **type2_list, struct coord *coords,
remailer.c:265:static void mix_redraw_chain(REMAILER **type2_list, struct coord *coords,
remailer.c:280:static void mix_redraw_head(MIXCHAIN *chain)
remailer.c:289:static const char *mix_format_caps(REMAILER *r)
remailer.c:340:static const char *mix_entry_fmt(char *dest, size_t destlen, size_t col, int cols,
remailer.c:396:static void mix_entry(char *b, size_t blen, MUTTMENU *menu, int num)
remailer.c:403:static int mix_chain_add(MIXCHAIN *chain, const char *s, REMAILER **type2_list)
remailer.c:440:void mix_make_chain(LIST **chainp)
remailer.c:649:int mix_check_message(HEADER *msg)
remailer.c:694:int mix_send_message(LIST *chain, const char *tempfile)
resize.c:34:void mutt_resize_screen(void)
rfc1524.c:52:int rfc1524_expand_command(BODY *a, char *filename, char *_type, char *command, int clen)
rfc1524.c:115:static char *get_field(char *s)
rfc1524.c:141:static int get_field_text(char *field, char **entry, char *type, char *filename, int line)
rfc1524.c:162:static int rfc1524_mailcap_parse(BODY *a, char *filename, char *type,
rfc1524.c:342:rfc1524_entry *rfc1524_new_entry(void)
rfc1524.c:347:void rfc1524_free_entry(rfc1524_entry **entry)
rfc1524.c:367:int rfc1524_mailcap_lookup(BODY *a, char *type, rfc1524_entry *entry, int opt)
rfc1524.c:425:static void strnfcpy(char *d, char *s, size_t siz, size_t len)
rfc1524.c:432:int rfc1524_expand_filename(char *nametemplate, char *oldfile, char *newfile, size_t nflen)
rfc1524.c:555:int mutt_rename_file(char *oldfile, char *newfile)
rfc2047.c:49:static size_t convert_string(ICONV_CONST char *f, size_t flen, const char *from,
rfc2047.c:82:int convert_nonmime_string(char **ps)
rfc2047.c:118:char *mutt_choose_charset(const char *fromcode, const char *charsets, char *u,
rfc2047.c:183:static size_t b_encoder(char *s, ICONV_CONST char *d, size_t dlen, const char *tocode)
rfc2047.c:209:static size_t q_encoder(char *s, ICONV_CONST char *d, size_t dlen, const char *tocode)
rfc2047.c:244:static size_t try_block(ICONV_CONST char *d, size_t dlen, const char *fromcode,
rfc2047.c:314:static size_t encode_block(char *s, char *d, size_t dlen, const char *fromcode,
rfc2047.c:344:static size_t choose_block(char *d, size_t dlen, int col, const char *fromcode,
rfc2047.c:376:static int rfc2047_encode(ICONV_CONST char *d, size_t dlen, int col, const char *fromcode,
rfc2047.c:559:void _rfc2047_encode_string(char **pd, int encode_specials, int col)
rfc2047.c:579:void rfc2047_encode_adrlist(ADDRESS *addr, const char *tag)
rfc2047.c:598:static int rfc2047_decode_word(char *d, const char *s, size_t len)
rfc2047.c:702:static const char *find_encoded_word(const char *s, const char **x)
rfc2047.c:730:static size_t lwslen(const char *s, size_t n)
rfc2047.c:750:static size_t lwsrlen(const char *s, size_t n)
rfc2047.c:773:void rfc2047_decode(char **pd)
rfc2047.c:876:void rfc2047_decode_adrlist(ADDRESS *a)
rfc2231.c:47:static void purge_empty_parameters(PARAMETER **headp)
rfc2231.c:66:static char *rfc2231_get_charset(char *value, char *charset, size_t chslen)
rfc2231.c:85:static void rfc2231_decode_one(char *dest, char *src)
rfc2231.c:104:static struct rfc2231_parameter *rfc2231_new_parameter(void)
rfc2231.c:114:static void rfc2231_list_insert(struct rfc2231_parameter **list, struct rfc2231_parameter *par)
rfc2231.c:134:static void rfc2231_free_parameter(struct rfc2231_parameter **p)
rfc2231.c:145:static void rfc2231_join_continuations(PARAMETER **head, struct rfc2231_parameter *par)
rfc2231.c:195:void rfc2231_decode_parameters(PARAMETER **headp)
rfc2231.c:292:int rfc2231_encode_string(char **pd)
rfc3676.c:44:static int get_quote_level(const char *line)
rfc3676.c:63:static int space_quotes(STATE *s)
rfc3676.c:79:static bool add_quote_suffix(STATE *s, int ql)
rfc3676.c:97:static size_t print_indent(int ql, STATE *s, int add_suffix)
rfc3676.c:130:static void flush_par(STATE *s, flowed_state_t *fst)
rfc3676.c:143:static int quote_width(STATE *s, int ql)
rfc3676.c:166:static void print_flowed_line(char *line, STATE *s, int ql, flowed_state_t *fst, int term)
rfc3676.c:235:static void print_fixed_line(const char *line, STATE *s, int ql, flowed_state_t *fst)
rfc3676.c:246:int rfc3676_handler(BODY *a, STATE *s)
rfc3676.c:328:void rfc3676_space_stuff(HEADER *hdr)
rfc822.c:65:void rfc822_dequote_comment(char *s)
rfc822.c:87:static void free_address(ADDRESS *a)
rfc822.c:97:int rfc822_remove_from_adrlist(ADDRESS **a, const char *mailbox)
rfc822.c:127:void rfc822_free_address(ADDRESS **p)
rfc822.c:144:static const char *parse_comment(const char *s, char *comment, size_t *commentlen, size_t commentmax)
rfc822.c:177:static const char *parse_quote(const char *s, char *token, size_t *tokenlen, size_t tokenmax)
rfc822.c:200:static const char *next_token(const char *s, char *token, size_t *tokenlen, size_t tokenmax)
rfc822.c:223:static const char *parse_mailboxdomain(const char *s, const char *nonspecial,
rfc822.c:255:static const char *parse_address(const char *s, char *token, size_t *tokenlen,
rfc822.c:286:static const char *parse_route_addr(const char *s, char *comment, size_t *commentlen,
rfc822.c:332:static const char *parse_addr_spec(const char *s, char *comment, size_t *commentlen,
rfc822.c:348:static void add_addrspec(ADDRESS **top, ADDRESS **last, const char *phrase,
rfc822.c:552:void rfc822_qualify(ADDRESS *addr, const char *host)
rfc822.c:566:void rfc822_cat(char *buf, size_t buflen, const char *value, const char *specials)
rfc822.c:592:void rfc822_write_address_single(char *buf, size_t buflen, ADDRESS *addr, int display)
rfc822.c:729:int rfc822_write_address(char *buf, size_t buflen, ADDRESS *addr, int display)
rfc822.c:841:bool rfc822_valid_msgid(const char *msgid)
rfc822.c:886:int safe_free(void **p) /* __SAFE_FREE_CHECKED__ */
rfc822.c:892:int main(int argc, char **argv)
safe_asprintf.c:27:int safe_asprintf(char **strp, const char *fmt, ...)
safe_asprintf.c:58:int safe_asprintf(char **strp, const char *fmt, ...)
score.c:36:void mutt_check_rescore(CONTEXT *ctx)
score.c:62:int mutt_parse_score(BUFFER *buf, BUFFER *s, unsigned long data, BUFFER *err)
score.c:126:void mutt_score_message(CONTEXT *ctx, HEADER *hdr, int upd_ctx)
score.c:156:int mutt_parse_unscore(BUFFER *buf, BUFFER *s, unsigned long data, BUFFER *err)
send.c:54:static void append_signature(FILE *f)
send.c:71:static bool addrcmp(ADDRESS *a, ADDRESS *b)
send.c:81:static int addrsrc(ADDRESS *a, ADDRESS *lst)
send.c:133:static ADDRESS *remove_user(ADDRESS *a, int leave_only)
send.c:168:static ADDRESS *find_mailing_lists(ADDRESS *t, ADDRESS *c)
send.c:191:static int edit_address(ADDRESS **a, /* const */ char *field)
send.c:217:static int edit_envelope(ENVELOPE *en, int flags)
send.c:301:static char *nntp_get_header(const char *s)
send.c:308:static void process_user_recips(ENVELOPE *env)
send.c:331:static void process_user_header(ENVELOPE *env)
send.c:388:void mutt_forward_intro(FILE *fp, HEADER *cur)
send.c:399:void mutt_forward_trailer(FILE *fp)
send.c:405:static int include_forward(CONTEXT *ctx, HEADER *cur, FILE *out)
send.c:442:void mutt_make_attribution(CONTEXT *ctx, HEADER *cur, FILE *out)
send.c:455:void mutt_make_post_indent(CONTEXT *ctx, HEADER *cur, FILE *out)
send.c:466:static int include_reply(CONTEXT *ctx, HEADER *cur, FILE *out)
send.c:498:static int default_to(ADDRESS **to, ENVELOPE *env, int flags, int hmfupto)
send.c:572:int mutt_fetch_recips(ENVELOPE *out, ENVELOPE *in, int flags)
send.c:613:static LIST *make_references(ENVELOPE *e)
send.c:633:void mutt_fix_reply_recipients(ENVELOPE *env)
send.c:656:void mutt_make_forward_subject(ENVELOPE *env, CONTEXT *ctx, HEADER *cur)
send.c:665:void mutt_make_misc_reply_headers(ENVELOPE *env, CONTEXT *ctx, HEADER *cur, ENVELOPE *curenv)
send.c:680:void mutt_add_to_reference_headers(ENVELOPE *env, ENVELOPE *curenv, LIST ***pp, LIST ***qq)
send.c:718:static void make_reference_headers(ENVELOPE *curenv, ENVELOPE *env, CONTEXT *ctx)
send.c:746:static int envelope_defaults(ENVELOPE *env, CONTEXT *ctx, HEADER *cur, int flags)
send.c:819:static int generate_body(FILE *tempfp, /* stream for outgoing message */
send.c:923:void mutt_set_followup_to(ENVELOPE *e)
send.c:995:static ADDRESS *set_reverse_name(ENVELOPE *env)
send.c:1053:static int send_message(HEADER *msg)
send.c:1119:void mutt_encode_descriptions(BODY *b, short recurse)
send.c:1135:static void decode_descriptions(BODY *b)
send.c:1150:static void fix_end_of_file(const char *data)
send.c:1165:int mutt_compose_to_sender(HEADER *hdr)
send.c:1186:int mutt_resend_message(FILE *fp, CONTEXT *ctx, HEADER *cur)
send.c:1220:static int is_reply(HEADER *reply, HEADER *orig)
send.c:1228:static int has_recips(ADDRESS *a)
send.c:1241:static int mutt_search_attach_keyword(char *filename)
send.c:1273:int ci_send_message(int flags,      /* send mode */
sendlib.c:64:static void encode_quoted(FGETCONV *fc, FILE *fout, int istext)
sendlib.c:203:static int b64_init(struct b64_context *ctx)
sendlib.c:212:static void b64_flush(struct b64_context *ctx, FILE *fout)
sendlib.c:242:static void b64_putc(struct b64_context *ctx, char c, FILE *fout)
sendlib.c:251:static void encode_base64(FGETCONV *fc, FILE *fout, int istext)
sendlib.c:274:static void encode_8bit(FGETCONV *fc, FILE *fout, int istext)
sendlib.c:290:int mutt_write_mime_header(BODY *a, FILE *f)
sendlib.c:402:int mutt_write_mime_body(BODY *a, FILE *f)
sendlib.c:479:void mutt_generate_boundary(PARAMETER **parm)
sendlib.c:498:static void update_content_info(CONTENT *info, CONTENT_STATE *s, char *d, size_t dlen)
sendlib.c:635:static size_t convert_file_to(FILE *file, const char *fromcode, int ncodes,
sendlib.c:771:static size_t convert_file_from_to(FILE *file, const char *fromcodes, const char *tocodes,
sendlib.c:926:int mutt_lookup_mime_type(BODY *att, const char *path)
sendlib.c:1030:static void transform_to_7bit(BODY *a, FILE *fpin)
sendlib.c:1084:void mutt_message_to_7bit(BODY *a, FILE *fp)
sendlib.c:1161:static void set_encoding(BODY *b, CONTENT *info)
sendlib.c:1202:void mutt_stamp_attachment(BODY *a)
sendlib.c:1208:char *mutt_get_body_charset(char *d, size_t dlen, BODY *b)
sendlib.c:1228:void mutt_update_encoding(BODY *a)
sendlib.c:1381:static int get_toplevel_encoding(BODY *a)
sendlib.c:1397:static bool check_boundary(const char *boundary, BODY *b)
sendlib.c:1448:char *mutt_make_date(char *s, size_t len)
sendlib.c:1464:void mutt_write_address_list(ADDRESS *adr, FILE *fp, int linelen, int display)
sendlib.c:1511:void mutt_write_references(LIST *r, FILE *f, int trim)
sendlib.c:1544:static const char *find_word(const char *src)
sendlib.c:1556:static int my_width(const char *str, int col, int flags)
sendlib.c:1590:static int print_val(FILE *fp, const char *pfx, const char *value, int flags, size_t col)
sendlib.c:1624:static int fold_one_header(FILE *fp, const char *tag, const char *value,
sendlib.c:1714:static char *unfold_header(char *s)
sendlib.c:1743:static int write_one_header(FILE *fp, int pfxw, int max, int wraplen, const char *pfx,
sendlib.c:1822:int mutt_write_one_header(FILE *fp, const char *tag, const char *value,
sendlib.c:1917:int mutt_write_rfc822_header(FILE *fp, ENVELOPE *env, BODY *attach, int mode, int privacy)
sendlib.c:2085:static void encode_headers(LIST *h)
sendlib.c:2112:const char *mutt_fqdn(short may_hide_host)
sendlib.c:2137:static char *gen_msgid(void)
sendlib.c:2157:static void alarm_handler(int sig)
sendlib.c:2170:static int send_msg(const char *path, char **args, const char *msg, char **tempfile)
sendlib.c:2327:static char **add_args(char **args, size_t *argslen, size_t *argsmax, ADDRESS *addr)
sendlib.c:2342:static char **add_option(char **args, size_t *argslen, size_t *argsmax, char *s)
sendlib.c:2350:int mutt_invoke_sendmail(ADDRESS *from, /* the sender */
sendlib.c:2511:void mutt_prepare_envelope(ENVELOPE *env, int final)
sendlib.c:2557:void mutt_unprepare_envelope(ENVELOPE *env)
sendlib.c:2575:static int _mutt_bounce_message(FILE *fp, HEADER *h, ADDRESS *to,
sendlib.c:2640:int mutt_bounce_message(FILE *fp, HEADER *h, ADDRESS *to)
sendlib.c:2735:static void set_noconv_flags(BODY *b, short flag)
sendlib.c:2752:int mutt_write_multiple_fcc(const char *path, HEADER *hdr, const char *msgid,
sendlib.c:2787:int mutt_write_fcc(const char *path, HEADER *hdr, const char *msgid, int post,
sha1.c:59:void sha1_transform(uint32_t state[5], const unsigned char buffer[64])
sha1.c:179:void sha1_init(SHA1_CTX *context)
sha1.c:192:void sha1_update(SHA1_CTX *context, const unsigned char *data, uint32_t len)
sha1.c:219:void sha1_final(unsigned char digest[20], SHA1_CTX *context)
sidebar.c:52:static int OpnIndex = -1; /* Current (open) mailbox */
sidebar.c:72:static BUFFY *get_incoming(void)
sidebar.c:121:static const char *cb_format_str(char *dest, size_t destlen, size_t col, int cols,
sidebar.c:257:static void make_sidebar_entry(char *buf, unsigned int buflen, int width,
sidebar.c:296:static int cb_qsort_sbe(const void *a, const void *b)
sidebar.c:345:static void update_entries_visibility(void)
sidebar.c:380:static void unsort_entries(void)
sidebar.c:414:static void sort_entries(void)
sidebar.c:432:static bool select_next(void)
sidebar.c:459:static int select_next_new(void)
sidebar.c:491:static bool select_prev(void)
sidebar.c:518:static bool select_prev_new(void)
sidebar.c:550:static int select_page_down(void)
sidebar.c:573:static int select_page_up(void)
sidebar.c:603:static bool prepare_sidebar(int page_size)
sidebar.c:691:static int draw_divider(int num_rows, int num_cols)
sidebar.c:776:static void fill_empty_space(int first_row, int num_rows, int div_width, int num_cols)
sidebar.c:816:static void draw_sidebar(int num_rows, int num_cols, int div_width)
sidebar.c:960:void mutt_sb_draw(void)
sidebar.c:1011:void mutt_sb_change_mailbox(int op)
sidebar.c:1058:void mutt_sb_set_buffystats(const CONTEXT *ctx)
sidebar.c:1086:const char *mutt_sb_get_highlight(void)
sidebar.c:1103:void mutt_sb_set_open_buffy(void)
sidebar.c:1132:void mutt_sb_notify_mailbox(BUFFY *b, int created)
sidebar.c:1195:void mutt_sb_toggle_virtual(void)
signal.c:33:static void exit_handler(int sig)
signal.c:53:static void chld_handler(int sig)
signal.c:58:static void sighandler(int sig)
signal.c:98:static int mutt_intr_hook(void)
signal.c:104:void mutt_signal_init(void)
signal.c:164:void mutt_block_signals(void)
signal.c:182:void mutt_unblock_signals(void)
signal.c:191:void mutt_block_signals_system(void)
signal.c:211:void mutt_unblock_signals_system(int catch)
signal.c:236:void mutt_allow_interrupt(int disposition)
smime.c:67:static void smime_free_key(smime_key_t **keylist)
smime.c:87:static smime_key_t *smime_copy_key(smime_key_t *key)
smime.c:114:void smime_void_passphrase(void)
smime.c:120:int smime_valid_passphrase(void)
smime.c:147:static const char *_mutt_fmt_smime_command(char *dest, size_t destlen, size_t col,
smime.c:283:static void smime_command(char *d, size_t dlen,
smime.c:292:static pid_t smime_invoke(FILE **smimein, FILE **smimeout, FILE **smimeerr,
smime.c:326:static char *smime_key_flags(int flags)
smime.c:346:static void smime_entry(char *s, size_t l, MUTTMENU *menu, int num)
smime.c:379:static smime_key_t *smime_select_key(smime_key_t *keys, char *query)
smime.c:475:static smime_key_t *smime_parse_key(char *buf)
smime.c:555:static smime_key_t *smime_get_candidates(char *search, short public)
smime.c:595:static smime_key_t *smime_get_key_by_hash(char *hash, short public)
smime.c:615:static smime_key_t *smime_get_key_by_addr(char *mailbox, short abilities,
smime.c:687:static smime_key_t *smime_get_key_by_str(char *str, short abilities, short public)
smime.c:727:static smime_key_t *smime_ask_for_key(char *prompt, short abilities, short public)
smime.c:755:static void _smime_getkeys(char *mailbox)
smime.c:809:void smime_getkeys(ENVELOPE *env)
smime.c:848:char *smime_find_keys(ADDRESS *adrlist, int oppenc_mode)
smime.c:888:static int smime_handle_cert_email(char *certificate, char *mailbox, int copy,
smime.c:984:static char *smime_extract_certificate(char *infile)
smime.c:1088:static char *smime_extract_signer_certificate(char *infile)
smime.c:1153:void smime_invoke_import(char *infile, char *mailbox)
smime.c:1224:int smime_verify_sender(HEADER *h)
smime.c:1288:static pid_t smime_invoke_encrypt(FILE **smimein, FILE **smimeout, FILE **smimeerr,
smime.c:1298:static pid_t smime_invoke_sign(FILE **smimein, FILE **smimeout, FILE **smimeerr, int smimeinfd,
smime.c:1433:static char *openssl_md_to_smime_micalg(char *md)
smime.c:1600:static pid_t smime_invoke_verify(FILE **smimein, FILE **smimeout, FILE **smimeerr,
smime.c:1610:static pid_t smime_invoke_decrypt(FILE **smimein, FILE **smimeout,
smime.c:1620:int smime_verify_one(BODY *sigbdy, STATE *s, const char *tempfile)
smime.c:1732:static BODY *smime_handle_entity(BODY *m, STATE *s, FILE *outFile)
smime.c:1936:int smime_decrypt_mime(FILE *fpin, FILE **fpout, BODY *b, BODY **cur)
smime.c:2003:int smime_application_smime_handler(BODY *m, STATE *s)
smime.c:2008:int smime_send_menu(HEADER *msg)
smtp.c:70:static bool valid_smtp_code(char *buf, size_t len, int *n)
smtp.c:90:static int smtp_get_resp(CONNECTION *conn)
smtp.c:131:static int smtp_rcpt_to(CONNECTION *conn, const ADDRESS *a)
smtp.c:158:static int smtp_data(CONNECTION *conn, const char *msgfile)
smtp.c:231:static bool address_uses_unicode(const char *a)
smtp.c:250:static bool addresses_use_unicode(const ADDRESS *a)
smtp.c:262:static int smtp_fill_account(ACCOUNT *account)
smtp.c:311:static int smtp_helo(CONNECTION *conn)
smtp.c:343:static int smtp_auth_sasl(CONNECTION *conn, const char *mechlist)
smtp.c:445:static int smtp_auth(CONNECTION *conn)
smtp.c:500:static int smtp_auth_plain(CONNECTION *conn)
smtp.c:554:static int smtp_open(CONNECTION *conn)
smtp.c:617:int mutt_smtp_send(const ADDRESS *from, const ADDRESS *to, const ADDRESS *cc,
sort.c:46:static int compare_score(const void *a, const void *b)
sort.c:55:static int compare_size(const void *a, const void *b)
sort.c:64:static int compare_date_sent(const void *a, const void *b)
sort.c:73:static int compare_subject(const void *a, const void *b)
sort.c:94:const char *mutt_get_name(ADDRESS *a)
sort.c:111:static int compare_to(const void *a, const void *b)
sort.c:126:static int compare_from(const void *a, const void *b)
sort.c:141:static int compare_date_received(const void *a, const void *b)
sort.c:150:static int compare_order(const void *a, const void *b)
sort.c:170:static int compare_spam(const void *a, const void *b)
sort.c:227:static int compare_label(const void *a, const void *b)
sort.c:257:sort_t *mutt_get_sort_func(int method)
sort.c:287:void mutt_sort_headers(CONTEXT *ctx, int init)
status.c:32:static char *get_sort_str(char *buf, size_t buflen, int method)
status.c:40:static void _menu_status_line(char *buf, size_t buflen, size_t col, int cols,
status.c:62:static const char *status_format_str(char *buf, size_t buflen, size_t col, int cols,
status.c:313:static void _menu_status_line(char *buf, size_t buflen, size_t col, int cols,
status.c:319:void menu_status_line(char *buf, size_t buflen, MUTTMENU *menu, const char *p)
strcasestr.c:11:char *strcasestr(const char *s1, const char *s2)
system.c:30:int _mutt_system(const char *cmd, int flags)
thread.c:28:static int is_descendant(THREAD *a, THREAD *b)
thread.c:40:static int need_display_subject(CONTEXT *ctx, HEADER *hdr)
thread.c:84:static void linearize_tree(CONTEXT *ctx)
thread.c:122:static void calculate_visibility(CONTEXT *ctx, int *max_depth)
thread.c:230:void mutt_draw_tree(CONTEXT *ctx)
thread.c:345:static LIST *make_subject_list(THREAD *cur, time_t *dateptr)
thread.c:409:static THREAD *find_subject(CONTEXT *ctx, THREAD *cur)
thread.c:449:static void unlink_message(THREAD **old, THREAD *cur)
thread.c:469:static void insert_message(THREAD **new, THREAD *newparent, THREAD *cur)
thread.c:480:static HASH *make_subj_hash(CONTEXT *ctx)
thread.c:499:static void pseudo_threads(CONTEXT *ctx)
thread.c:559:void mutt_clear_threads(CONTEXT *ctx)
thread.c:578:static int compare_threads(const void *a, const void *b)
thread.c:722:static void check_subjects(CONTEXT *ctx, int init)
thread.c:754:void mutt_sort_threads(CONTEXT *ctx, int init)
thread.c:980:static HEADER *find_virtual(THREAD *cur, int reverse)
thread.c:1025:int _mutt_aside_thread(HEADER *hdr, short dir, short subthreads)
thread.c:1081:int mutt_parent_message(CONTEXT *ctx, HEADER *hdr, int find_root)
thread.c:1122:void mutt_set_virtual(CONTEXT *ctx)
thread.c:1144:int _mutt_traverse_thread(CONTEXT *ctx, HEADER *cur, int flag)
thread.c:1303:int mutt_messages_in_thread(CONTEXT *ctx, HEADER *hdr, int flag)
thread.c:1354:static void clean_references(THREAD *brk, THREAD *cur)
thread.c:1391:void mutt_break_thread(HEADER *hdr)
thread.c:1400:static bool link_threads(HEADER *parent, HEADER *child, CONTEXT *ctx)
thread.c:1416:int mutt_link_threads(HEADER *cur, HEADER *last, CONTEXT *ctx)
txt2c.c:20:void static txt2c(char *sym, FILE *fp)
txt2c.c:42:int main(int argc, char *argv[])
url.c:40:int url_pct_decode(char *s)
url.c:67:url_scheme_t url_check_scheme(const char *s)
url.c:91:static int ciss_parse_userhost(ciss_url_t *ciss, char *src)
url.c:158:int url_parse_ciss(ciss_url_t *ciss, char *src)
url.c:170:static void url_pct_encode(char *dst, size_t l, const char *src)
url.c:192:int url_ciss_tostring(ciss_url_t *ciss, char *dest, size_t len, int flags)
url.c:246:int url_parse_mailto(ENVELOPE *e, char **body, const char *src)
utf8.c:24:int mutt_wctoutf8(char *s, unsigned int c, size_t buflen)
version.c:329:static void print_compile_options(void)
version.c:359:static char *rstrip_in_place(char *s)
version.c:381:void print_version(void)
version.c:470:void print_copyright(void)
version.c:496:bool feature_enabled(const char *name)
wcscasecmp.c:22:int wcscasecmp(const wchar_t *a, const wchar_t *b)
wcwidth.c:60:int wcwidth_ucs(wchar_t ucs)
